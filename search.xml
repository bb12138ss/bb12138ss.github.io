<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JS函数注意事项</title>
      <link href="/2023/03/16/JS%E5%87%BD%E6%95%B0%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
      <url>/2023/03/16/JS%E5%87%BD%E6%95%B0%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ol><li>JS 中函数的重载会覆盖掉上一次的定义<br>(1) JS 中函数的重载会覆盖掉上一次的定义<br>(2) 当你调用 f1() 时候其实调用的是 f1(name)<br>(3) 调用 f1(name) 如果你没有传入实参, 那么这个 name 就是 undefined<br>function f1() {<br>alert(“ok jack~”)<br>}<br>function f1(name) {<br>alert(“hi “ + name); }<br>f1();</li></ol><hr><ol><li>函数的 arguments 隐形参数（作用域在 function 函数内）<br>(1) 隐形参数: 在 function 函数中不需要定义，可以直接用来获取所有参<br>数的变量。<br>(2) 隐形参数特别像 java 的可变参数一样。 public void fun( int … args )<br>(3) js 中的隐形参数跟 java 的可变参数一样。操作类似数组<br>(4) 我们用console.log 输出对象的数据，使用, 连接而不是+</li></ol><hr><ol><li>(1)如果我们的函数有形参，在传入实参的时候，仍然按照顺序匹配<br>(2)如果有匹配上，就赋给他， 如果没有匹配上，也无所谓<br>(3)仍然会把所有的实参，赋给 arguments<br>(4)如果形参个数，大于了实参个数，则该形参的值为 undefined</li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS数组</title>
      <link href="/2023/03/16/JS%E6%95%B0%E7%BB%84/"/>
      <url>/2023/03/16/JS%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="数组定义"><a href="#数组定义" class="headerlink" title="数组定义"></a>数组定义</h1><h2 id="数组的四种定义方式"><a href="#数组的四种定义方式" class="headerlink" title="数组的四种定义方式"></a>数组的四种定义方式</h2><p>``` 数组定义方式1<br>var fruit1 = [“苹果”,”草莓”,”香蕉”];<br>console.log(“fruit1=” + fruit1);<br>console.log(fruit1[1]); //表示访问fruit1数组的第2个元素，1表达下标/索引，从0开始编号</p><p> 数组定义方式2<br>var fruit2 = [];//空数组<br>//添加元素<br>fruit2[0] = “橘子”;<br>fruit2[2] = “菠萝”;<br>console.log(“fruit2[1]=” + fruit2[1]);//如果该元素伟定义，返回的就是undefined<br>console.log(“fruit2[10]=” + fruit2[10]);// 如 果 该 元 素 不 存 在 ， 返 回 的 就 是<br>undefined</p><p> 数组定义方式3<br>var fruit3 = new Array(“蓝莓”,”猕猴桃”,”榴莲”);</p><p> 数组定义方式4<br>var fruit4 = new Array();//空数组<br>console.log(typeof fruit4);<br>fruit4[0] = “苹果”;<br>fruit4[1] = “苹果”;<br>fruit4[2] = “yy”;//相当于是给数组扩容<br>fruit4[0] = “zz”;//替换<br>fruit4[8] = “红旗”;//扩容, 如果是跳过了下标给赋值，那么中间没有赋值的元素<br>为 undefined<br>console.log(“fruit4[3]=” + fruit4[3]);//undefined<br>console.log(“fruit4=” + fruit4);</p><h2 id="数组使用和遍历"><a href="#数组使用和遍历" class="headerlink" title="数组使用和遍历"></a>数组使用和遍历</h2><p>遍历<br>console.log(“数组的长度= “ + cars.length)//6<br>for (i = 0; i &lt; cars.length; i++) {<br>console.log(cars[i]); //log 方法会自动换行<br>}</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS事件</title>
      <link href="/2023/03/15/JS%E4%BA%8B%E4%BB%B6/"/>
      <url>/2023/03/15/JS%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-事件"><a href="#JavaScript-事件" class="headerlink" title="JavaScript 事件"></a>JavaScript 事件</h1><p><strong>HTML 事件</strong><br><strong>HTML 事件可以是浏览器或用户做的某些事情。</strong></p><p>下面是 HTML 事件的一些例子：</p><p>HTML 网页完成加载<br>HTML 输入字段被修改<br>HTML 按钮被点击<br>通常，当事件发生时，用户会希望做某件事。</p><p>JavaScript 允许您在事件被侦测到时执行代码。</p><p>通过 JavaScript 代码，HTML 允许您向 HTML 元素添加事件处理程序。</p><h2 id="常见的-HTML-事件"><a href="#常见的-HTML-事件" class="headerlink" title="常见的 HTML 事件"></a>常见的 HTML 事件</h2><p>下面是一些常见的 HTML 事件：<br>事件 | 描述<br>-|-|-<br>onchange|HTML 元素已被改变<br>onclick|用户点击了 HTML 元素<br>onmouseover|用户把鼠标移动到 HTML 元素上<br>onmouseout|用户把鼠标移开 HTML 元素<br>onkeydown|用户按下键盘按键<br>onload|浏览器已经完成页面加载</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS定义数据类型</title>
      <link href="/2023/03/15/JS%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2023/03/15/JS%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><figure class="highlight plaintext"><figcaption><span>document</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> 地址: https://www.w3school.com.cn/js/index.asp</span><br><span class="line"> 离线文档: W3School 离线手册(2017.03.11 版).chm</span><br><span class="line"> 基本说明</span><br><span class="line">JavaScript 能改变 HTML 内容，能改变 HTML 属性，能改变 HTML 样式 (CSS)，能完成</span><br><span class="line">页面的数据验证。</span><br></pre></td></tr></table></figure><h2 id="1-两种js的引入方式"><a href="#1-两种js的引入方式" class="headerlink" title="1.两种js的引入方式"></a>1.两种js的引入方式</h2><h3 id="方式1"><a href="#方式1" class="headerlink" title="方式1:"></a>方式1:</h3><ol><li>可以在 head 和 body 嵌入 script</li><li>执行顺序 从上到下</li><li>建议放在 head</li></ol><h3 id="方式2"><a href="#方式2" class="headerlink" title="方式2:"></a>方式2:</h3><p>使用 script 标签引入外部JS文件</p><h2 id="2-JavaScript变量"><a href="#2-JavaScript变量" class="headerlink" title="2.JavaScript变量"></a>2.JavaScript变量</h2><p><img src="https://pic.cartafi.org/safe/Z3J3DLflNa" alt="JavaScript 变量表示存储数据的容器"></p><h2 id="3-JavaScript-数据类型"><a href="#3-JavaScript-数据类型" class="headerlink" title="3.JavaScript 数据类型"></a>3.JavaScript 数据类型</h2><h3 id="3-1数据类型介绍"><a href="#3-1数据类型介绍" class="headerlink" title="3.1数据类型介绍"></a>3.1数据类型介绍</h3><p>数值类型： number<br>字符串类型： string<br>对象类型: object<br>布尔类型： boolean<br>函数类型： function</p><h3 id="3-2特殊值"><a href="#3-2特殊值" class="headerlink" title="3.2特殊值!!!"></a>3.2特殊值!!!</h3><p>undefined 变量未赋初始值时，默认 undefined<br>null 空值<br>NaN Not a Number 非数</p><h3 id="3-3数据类型注意"><a href="#3-3数据类型注意" class="headerlink" title="3.3数据类型注意!!"></a>3.3数据类型注意!!</h3><ol><li>String 字符串 [可以双引号括起来，也可以单引号括起来]”a book of JavaScript”、’abc’、<br>“a”、””</li><li>在 JavaScript 语言中，所有的变量，都可以做为一个 boolean 类型的变量去使<br>用。</li><li>0 、null、 undefined、””(空串) 都认为是 false</li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针</title>
      <link href="/2023/03/11/2023-3-10-%E6%8C%87%E9%92%88/"/>
      <url>/2023/03/11/2023-3-10-%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a><u><strong>指针</strong></u></h1><h2 id="热身"><a href="#热身" class="headerlink" title="热身"></a><strong>热身</strong></h2><p><strong><em><img src="https://s1.vika.cn/space/2023/03/13/24f62f3a0d6a4324b233d5c7dd0f1dbb" alt="image-20220907162221270"></em></strong></p><blockquote><p><strong><em>注释：(补充)不能存放int的值</em></strong> </p><p><img src="https://s1.vika.cn/space/2023/03/13/5ecdace0cd424bdbadfec9eaef85eacf" alt="image-20220907171956161"></p><hr></blockquote><p><img src="https://s1.vika.cn/space/2023/03/13/8176a9f2d62f4b4189e3188d02abef59" alt="image-20220907171021290"></p><blockquote><p><strong><em>注释：(补充)修改i的值也不影响p的值</em></strong> </p><p><strong>p指向i 的意思是说，通过p找到i*</strong>     ==*p就是i==</p><p><strong><em>3.如果一个指针变量指向了某个普通变量，则指针变量就完全等同于普通变量*</em></strong></p><p><em>==<strong>例子:</strong>==</em></p><p>​    ==<strong>如果p是个指针变量，并且p存放了普通变量i的地址，</strong>==</p><p><em>==<strong>则p指向了普通变量i ，p就完全等同于 i</strong>==*</em>   </p><p><em>==<strong>或者说 在所有出现p地方都可以替换成i</strong>==*</em></p><p>​             <strong><strong>==在所有出现的i地方都可以替换p==</strong></strong></p><h2 id><a href="#" class="headerlink" title></a><img src="https://s1.vika.cn/space/2023/03/13/031750831e2b4e0097bed472d9b7ebc7" alt="image-20220907173038391"></h2></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>指针就是地址，地址就是编号</p><p><img src="https://s1.vika.cn/space/2023/03/13/bfb7cac2f2924bd885a79b34821c7945" alt="image-20220907173750927"></p><h2 id="指针的重要性"><a href="#指针的重要性" class="headerlink" title="指针的重要性"></a>指针的重要性</h2><p><img src="https://s1.vika.cn/space/2023/03/13/604980318cf4468dada0556a53bd3947" alt="image-20220907180454113"></p><p>其中 1和4更重要</p><h2 id="指针定义"><a href="#指针定义" class="headerlink" title="指针定义"></a>指针定义</h2><p><img src="https://s1.vika.cn/space/2023/03/13/65dfd5ad93ab4607b6e70c672b1c4018" alt="image-20220907181125974"></p><p>先是内存条通过控制线传给cpu，cpu再把数据通过数据线传给内存条，地址线的作用是用来确定是到底是哪个单元来进行控制。  </p><h2 id="基本类型指针常见错误"><a href="#基本类型指针常见错误" class="headerlink" title="基本类型指针常见错误"></a>基本类型指针常见错误</h2><p><img src="https://s1.vika.cn/space/2023/03/13/5ae95b58f67c476888edf5bbe5707e83" alt="image-20220910184133587"></p><p><img src="https://s1.vika.cn/space/2023/03/13/fdb3d2f162394636a621fa43a74e5ff9" alt="image-20220910184056830"></p><p>指针互换</p><p>这个不能完成互换功能</p><p><img src="https://s1.vika.cn/space/2023/03/13/40869cfa13cc418380ae825df261abea" alt="image-20220915083217153"></p><p> <strong>可以互换功能</strong></p><p><strong>因为p存放a的地址(p = &amp;a)，所以p指向a，所以* p = a</strong></p><p><strong>同理,因为p存放b的地址(p= &amp;b ),q指向b，所以* q = b</strong></p><p><strong><img src="https://s1.vika.cn/space/2023/03/13/6753a343106c4bb083cf8472e5b6bf28" alt="image-20220915083731584"></strong></p><p><strong><img src="https://s1.vika.cn/space/2023/03/13/69dbb327df7a45a18356886ff03bb068" alt="image-20220915084054003"></strong></p><p><strong>*的定义</strong></p><ol><li><p>乘法</p></li><li><p>定义指针变量</p><p>int <em> p ；//定义了一个名字叫p的变量，int </em>表示p只能存放int变量的地址</p><p><strong>3.指针运算符，该运算符放在已经定义好的指针变量的前面==</strong>    </p><p><strong>如果p是一个已经定义好的指针变量，==</strong></p><p><strong>则*p表示为，以p的内容为指针的变量==</strong></p></li></ol><p>p132</p><p><img src="https://s1.vika.cn/space/2023/03/13/9e2ecd1aa0c245eb8fdd96f218a08021" alt="image-20220918194033152"></p><p><strong>指针和数组</strong></p><p> <strong>指针和一维数组</strong></p><p>一维数组名是个指针常量</p><p>它存放的是一维数组第一个元素的地址，==数组名 = 数组第一个元素的地址值== a == &amp;a[0]</p><p><img src="https://s1.vika.cn/space/2023/03/13/dd19e416e0d745528f08e989be7a8414" alt="image-20220918201849765"></p><p><img src="https://s1.vika.cn/space/2023/03/13/298454ff1fbe4d2c8347f659e1ad56fe" alt="image-20220918202431592"></p><p>a等价于&amp;a[0],因为a就是a[0]的地址，&amp;a[0]本身就是int *类型</p><p>a[i] = *(a + i) =i[a]</p><p>例如: a[3] = *(a + 3) = 3[a]</p><p><img src="https://s1.vika.cn/space/2023/03/13/287fb099d849450c82c318e3eea2fca9" alt="image-20220918203948861"></p><p><img src="https://s1.vika.cn/space/2023/03/13/49fab71ca6b3456a8f6398abfa29d6c5" alt="image-20220919164647456"></p><p><img src="https://s1.vika.cn/space/2023/03/13/f85e564ab1104af9a7a38b95f7bdee9a" alt="image-20220919181048900"></p><p><img src="https://s1.vika.cn/space/2023/03/13/e8b1108cc3bb45bf81e558a768332af7" alt="image-20220919181103847"></p><p>例如 两个不同的小区，相减没意义。数组指针相减可以</p><p><img src="https://s1.vika.cn/space/2023/03/13/afe48fd263a8468bb182bbc30611c7b4" alt="image-20220919183401398"></p><p>p q r 只存放它指向变量的第一个地址，p q r本身的数据类型来确定 pqr 本身占多少字节</p><p>传统数组的缺点</p><p><img src="https://s1.vika.cn/space/2023/03/13/98c9f36b065c42ffaf52b20fdd8c1bf2" alt="image-20220919192900924"></p><p>为什么需要动态分配内存？</p><p>​    动态数组很好的解决了传统数组的这4个缺陷</p><p><img src="https://s1.vika.cn/space/2023/03/13/4f8a1e07a8604ed1a4c23d1c0296a0a0" alt="image-20220919200231277">4.补充:因为p返回的是第一个字节的地址，而且不能确定p指向的变量占几个字节，所以前面需要(int <em> )强制转换<br>                <em>*前面有数据类型就是静态分配，凡是加了malloc函数就是动态分配的</em></em></p><p>free(p)  //把p所指向的内存释放掉 即 malloc(4)里的4个字节的空间释放掉</p><blockquote><p><em>p = 5       // </em>p 代表的就是一个int变量，只不过 * p这个整型变量的内存分配方式和11行的分配方式不同 </p></blockquote><p><img src="https://s1.vika.cn/space/2023/03/13/057e262b203c4cfbab446025dcd05eb3" alt="image-20220919203016773"></p><p><img src="https://s1.vika.cn/space/2023/03/13/cd9a99db77f34390a1f4ad1328aa224b" alt="image-20220923200016878"></p><p><img src="https://s1.vika.cn/space/2023/03/13/d0eab0155cc345b79504efd7185ec2ec" alt="微信图片_20220923201330"></p><p><img src="https://s1.vika.cn/space/2023/03/13/2456fc82314a40178b0774174f5e458f" alt="image-20220923201708872"></p><p><img src="https://s1.vika.cn/space/2023/03/13/746db9ec7839465daa4e746faa264968" alt="image-20220923202121845"></p><p><img src="https://s1.vika.cn/space/2023/03/13/d12966e516df4e459565f06ffecc33a9" alt="image-20220923202559794">要想通过f(p)方式改变p的值，必须只能发送p的地址来改变，所以图中f(p)是改变不了p的值，必须是要发送p的地址，所以要改成f(&amp;p)</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown教程</title>
      <link href="/2023/03/11/markdown%E6%95%99%E7%A8%8B/"/>
      <url>/2023/03/11/markdown%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 标题名字(井号的个数代表标题的级数)</span></span><br></pre></td></tr></table></figure><h1 id="一级标题使用1个"><a href="#一级标题使用1个" class="headerlink" title="一级标题使用1个"></a>一级标题使用1个</h1><h2 id="二级标题使用2个"><a href="#二级标题使用2个" class="headerlink" title="二级标题使用2个"></a>二级标题使用2个</h2><h3 id="三级标题使用3个"><a href="#三级标题使用3个" class="headerlink" title="三级标题使用3个"></a>三级标题使用3个</h3><h4 id="四级标题使用4个"><a href="#四级标题使用4个" class="headerlink" title="四级标题使用4个"></a>四级标题使用4个</h4><h5 id="五级标题使用5个"><a href="#五级标题使用5个" class="headerlink" title="五级标题使用5个"></a>五级标题使用5个</h5><h6 id="六级标题使用6个"><a href="#六级标题使用6个" class="headerlink" title="六级标题使用6个"></a>六级标题使用6个</h6><hr><h2 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h2><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这就是 ~~删除线~~ (使用波浪号)</span><br></pre></td></tr></table></figure><p>这就是 <del>删除线</del> (使用波浪号)</p><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是用来 <span class="emphasis">*斜体*</span> 的 <span class="emphasis">_文本_</span></span><br></pre></td></tr></table></figure><p>这是用来 <em>斜体</em> 的 <em>文本</em></p><h3 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是用来 <span class="strong">**加粗**</span> 的 <span class="strong">__文本__</span></span><br></pre></td></tr></table></figure><p>这是用来 <strong>加粗</strong> 的 <strong>文本</strong></p><h3 id="斜体-加粗"><a href="#斜体-加粗" class="headerlink" title="斜体+加粗"></a>斜体+加粗</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是用来 <span class="strong">**<span class="emphasis">*斜体+加粗*</span>**</span> 的 <span class="strong">__<span class="emphasis">_文本_</span>__</span></span><br></pre></td></tr></table></figure><p>这是用来 <strong><em>斜体+加粗</em></strong> 的 <strong><em>文本</em></strong></p><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>下划线是HTML语法</p><p><code>下划线</code> <u>下划线(快捷键<code>command</code>+<code>u</code>，视频中所有的快捷键都是针对Mac系统，其他系统可自行查找)</u></p><h3 id="高亮（需勾选扩展语法）"><a href="#高亮（需勾选扩展语法）" class="headerlink" title="高亮（需勾选扩展语法）"></a>高亮（需勾选扩展语法）</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是用来 ==斜体+加粗== 的文本</span><br></pre></td></tr></table></figure><p>这是用来 ==斜体+加粗== 的文本</p><h3 id="下标（需勾选扩展语法）"><a href="#下标（需勾选扩展语法）" class="headerlink" title="下标（需勾选扩展语法）"></a>下标（需勾选扩展语法）</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">水 H~2~O </span><br><span class="line">双氧水 H~2~O~2~ </span><br></pre></td></tr></table></figure><p>水 H~2~O </p><p>双氧水 H~2~O~2~</p><h3 id="上标（需勾选扩展语法）"><a href="#上标（需勾选扩展语法）" class="headerlink" title="上标（需勾选扩展语法）"></a>上标（需勾选扩展语法）</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">面积 m^2^ </span><br><span class="line">体积 m^3^</span><br></pre></td></tr></table></figure><p>面积 m^2^<br>体积 m^3^</p><h3 id="表情符号"><a href="#表情符号" class="headerlink" title="表情符号"></a>表情符号</h3><p> Emoji 支持表情符号，你可以用系统默认的 Emoji 符号（ Windows 用户不一定支持，自己试下~）。 也可以用图片的表情，输入 <code>:</code> 将会出现智能提示。 </p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>使用 <code>|</code> 来分隔不同的单元格，使用 <code>-</code> 来分隔表头和其他行：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name | price</span><br><span class="line">--- | ---</span><br><span class="line">fried chicken | 19</span><br><span class="line">cola|5</span><br></pre></td></tr></table></figure><blockquote><p>为了使 Markdown 更清晰，<code>|</code> 和 <code>-</code> 两侧需要至少有一个空格（最左侧和最右侧的 <code>|</code> 外就不需要了）。</p></blockquote><div class="table-container"><table><thead><tr><th>name</th><th>price</th></tr></thead><tbody><tr><td>fried chicken</td><td>19</td></tr><tr><td>cola</td><td>5</td></tr></tbody></table></div><p>为了美观，可以使用空格对齐不同行的单元格，并在左右两侧都使用 <code>|</code> 来标记单元格边界，在表头下方的分隔线标记中加入 <code>:</code>，即可标记下方单元格内容的对齐方式：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|    name       | price |</span><br><span class="line">| :------------ | :---: |</span><br><span class="line">| fried chicken | 19    |</span><br><span class="line">| cola          |  32   |</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:left">name</th><th style="text-align:center">price</th></tr></thead><tbody><tr><td style="text-align:left">fried chicken</td><td style="text-align:center">19</td></tr><tr><td style="text-align:left">cola</td><td style="text-align:center">32</td></tr></tbody></table></div><p>使用快捷键<code>command</code>+<code>opt</code>+<code>T</code>更方便(段落→表格→插入表格，即可查看快捷键)</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;“后悔创业”</span><br></pre></td></tr></table></figure><blockquote><p>“后悔创业”</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;也可以在引用中</span><br><span class="line">&gt;&gt;使用嵌套的引用</span><br></pre></td></tr></table></figure><blockquote><p>也可以在引用中</p><blockquote><p>使用嵌套的引用</p></blockquote></blockquote><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表—符号-空格"><a href="#无序列表—符号-空格" class="headerlink" title="无序列表—符号 空格"></a>无序列表—符号 空格</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 可以使用 <span class="code">`*`</span> 作为标记</span><br><span class="line"><span class="bullet">+</span> 也可以使用 <span class="code">`+`</span></span><br><span class="line"><span class="bullet">-</span> 或者 <span class="code">`-`</span></span><br></pre></td></tr></table></figure><ul><li>可以使用 <code>*</code> 作为标记</li></ul><ul><li>也可以使用 <code>+</code></li></ul><ul><li>或者 <code>-</code></li></ul><h3 id="有序列表—数字-空格"><a href="#有序列表—数字-空格" class="headerlink" title="有序列表—数字 . 空格"></a>有序列表—数字 <code>.</code> 空格</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 有序列表以数字和 <span class="code">`.`</span> 开始；</span><br><span class="line"><span class="bullet">3.</span> 数字的序列并不会影响生成的列表序列；</span><br><span class="line"><span class="bullet">4.</span> 但仍然推荐按照自然顺序（1.2.3...）编写。</span><br></pre></td></tr></table></figure><ol><li><p>有序列表以数字和 <code>.</code> 开始；</p></li><li><p>数字的序列并不会影响生成的列表序列；</p></li><li><p>但仍然推荐按照自然顺序（1.2.3…）编写。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以使用：数字\. 来取消显示为列表（用反斜杠进行转义）</span><br></pre></td></tr></table></figure></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​<span class="code">```语言名称</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">也可以通过 <span class="code">``，插入行内代码（`</span> 是 <span class="code">`Tab`</span> 键上边、数字 <span class="code">`1`</span> 键左侧的那个按键）：</span><br><span class="line"></span><br><span class="line">例如 <span class="code">`Markdown`</span></span><br></pre></td></tr></table></figure><p><code>Markdown</code></p><h3 id="转换规则"><a href="#转换规则" class="headerlink" title="转换规则"></a>转换规则</h3><p>代码块中的文本（包括 Markdown 语法）都会显示为原始内容</p><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>可以在一行中使用三个或更多的 <code>*</code>、<code>-</code> 或 <code>_</code> 来添加分隔线（``）：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"><span class="strong">***</span></span></span><br><span class="line"><span class="strong"><span class="section">------</span></span></span><br><span class="line"><span class="strong"><span class="section">__<span class="emphasis">_</span></span></span></span><br></pre></td></tr></table></figure><hr><hr><hr><h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><h3 id="外部跳转—超链接"><a href="#外部跳转—超链接" class="headerlink" title="外部跳转—超链接"></a>外部跳转—超链接</h3><p>格式为 <code>[link text](link)</code>。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">帮助文档</span>](<span class="link">https://support.typora.io/Links/#faq</span>)</span><br></pre></td></tr></table></figure><p><a href="https://support.typora.io/Links/#faq">帮助文档</a></p><h3 id="内部跳转—本文件内跳（Typora支持）"><a href="#内部跳转—本文件内跳（Typora支持）" class="headerlink" title="内部跳转—本文件内跳（Typora支持）"></a>内部跳转—本文件内跳（Typora支持）</h3><p>格式为 <code>[link text](#要去的目的地--标题）</code>。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">我想跳转</span>](<span class="link">#饼图（Pie）</span>)</span><br></pre></td></tr></table></figure><blockquote><p>Open Links in Typora</p><p>You can use <code>command+click</code> (macOS), or <code>ctrl+click</code> (Linux/Windows) on links in Typora to jump to target headings, or open them in Typora, or open in related apps.</p></blockquote><p><a href="#饼图（Pie）">我想跳转</a></p><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>使用 <code>&lt;&gt;</code> 包括的 URL 或邮箱地址会被自动转换为超链接：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&lt;https://www.baidu.com&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;123@email.com&gt;</span><br></pre></td></tr></table></figure><p><a href="https://www.baidu.com">https://www.baidu.com</a></p><p><a href="mailto:123@email.com">123@email.com</a></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">自己起的图片名字</span>](<span class="link">图片地址或者图片本地存储的路径</span>)</span><br></pre></td></tr></table></figure><h3 id="网上的图片"><a href="#网上的图片" class="headerlink" title="网上的图片"></a>网上的图片</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![原神](https://pic.cartafi.org/safe/EOgHRTR1LR</span><br><span class="line">https://pic.cartafi.org/safe/LfE6ZRyUG6</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="https://pic.cartafi.org/safe/EOgHRTR1LR" alt="多啦a梦"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2023/03/11/%E6%B5%8B%E8%AF%95/"/>
      <url>/2023/03/11/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><div align="center" class="aspect-ratio">    <iframe src="https://player.bilibili.com/player.html?aid=474023258&&page=1&as_wide=1&high_quality=1&danmaku=0" scrolling="no" border="0" frameborder="no" framespacing="0" high_quality="1" danmaku="1" allowfullscreen="true">     </iframe></div><br><br></p><p><div id="aplayer-oSEOhviA" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="4895239160" data-server="netease" data-type="playlist" data-mode="random" data-autoplay="false" data-listmaxheight="340px" data-preload="auto" data-theme="#e3f2f5" data-volume="0.4" mutex="true"></div><br><div class="note simple"><p>内容</p></div></p><div class="timeline blue"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>时间轴样式</p></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div></div><div class="timeline-item-content"><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class="timeline-item-content"><p>不需要额外处理。</p></div></div></div><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p> <img src="https://cdn.jsdelivr.net/gh/bb12138ss/img@main//test/3.gif" alt="多啦a梦"></p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
