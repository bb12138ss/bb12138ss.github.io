<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>创建和管理表</title>
      <link href="/2023/03/23/mysql-%E5%88%9B%E5%BB%BA%E5%92%8C%E7%AE%A1%E7%90%86%E8%A1%A8/"/>
      <url>/2023/03/23/mysql-%E5%88%9B%E5%BB%BA%E5%92%8C%E7%AE%A1%E7%90%86%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="练习1"><a href="#练习1" class="headerlink" title="练习1:"></a>练习1:</h2><h4 id="1-创建数据库test01-office-指明字符集为utf8。并在此数据库下执行下述操作"><a href="#1-创建数据库test01-office-指明字符集为utf8。并在此数据库下执行下述操作" class="headerlink" title="1. 创建数据库test01_office,指明字符集为utf8。并在此数据库下执行下述操作"></a>1. 创建数据库test01_office,指明字符集为utf8。并在此数据库下执行下述操作</h4><p><code>CREATE DATABASE  IF NOT EXISTS test01_office CHARACTER SET &#39;utf8&#39;;</code></p><h4 id="2-创建表dept01"><a href="#2-创建表dept01" class="headerlink" title="2. 创建表dept01"></a>2. 创建表dept01</h4><p>字段 类型<br>/<em>id INT(7)<br>NAME VARCHAR(25)</em>/<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> dept01(</span><br><span class="line">id <span class="type">INT</span>(<span class="number">7</span>),</span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">25</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h4 id="3-将表departments中的数据插入新表dept02中"><a href="#3-将表departments中的数据插入新表dept02中" class="headerlink" title="3. 将表departments中的数据插入新表dept02中"></a>3. 将表departments中的数据插入新表dept02中</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> dept02 </span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> departments;</span><br></pre></td></tr></table></figure><h4 id="4-创建表emp01"><a href="#4-创建表emp01" class="headerlink" title="4. 创建表emp01"></a>4. 创建表emp01</h4><p>/<em><br>字段 类型<br>id INT(7)<br>first_name VARCHAR (25)<br>last_name VARCHAR(25)<br>dept_id INT(7)</em>/<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> emp01(</span><br><span class="line">id <span class="type">INT</span>(<span class="number">7</span>),</span><br><span class="line">first_name <span class="type">VARCHAR</span>(<span class="number">25</span>),</span><br><span class="line">last_name <span class="type">VARCHAR</span>(<span class="number">25</span>),</span><br><span class="line">dept_id <span class="type">INT</span>(<span class="number">7</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">DESC</span> emp01;</span><br></pre></td></tr></table></figure></p><h4 id="5-将列last-name的长度增加到50"><a href="#5-将列last-name的长度增加到50" class="headerlink" title="5. 将列last_name的长度增加到50"></a>5. 将列last_name的长度增加到50</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp01 </span><br><span class="line">MODIFY last_name <span class="type">VARCHAR</span>(<span class="number">50</span>);</span><br><span class="line">#<span class="number">6.</span> 根据表employees创建emp02</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> emp02 </span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h4 id="7-删除表emp01"><a href="#7-删除表emp01" class="headerlink" title="7. 删除表emp01"></a>7. 删除表emp01</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> emp01;</span><br></pre></td></tr></table></figure><h4 id="8-将表emp02重命名为emp01"><a href="#8-将表emp02重命名为emp01" class="headerlink" title="8. 将表emp02重命名为emp01"></a>8. 将表emp02重命名为emp01</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp02 </span><br><span class="line">RENAME <span class="keyword">TO</span> emp01;</span><br></pre></td></tr></table></figure><h4 id="9-在表dept02和emp01中添加新列test-column，并检查所作的操作"><a href="#9-在表dept02和emp01中添加新列test-column，并检查所作的操作" class="headerlink" title="9.在表dept02和emp01中添加新列test_column，并检查所作的操作"></a>9.在表dept02和emp01中添加新列test_column，并检查所作的操作</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dept02 </span><br><span class="line"><span class="keyword">ADD</span> test_column <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">DESC</span> dept02;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span>  emp01</span><br><span class="line"><span class="keyword">ADD</span> test_column <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">DESC</span> emp01;</span><br></pre></td></tr></table></figure><h4 id="10-直接删除表emp01中的列-department-id"><a href="#10-直接删除表emp01中的列-department-id" class="headerlink" title="10.直接删除表emp01中的列 department_id"></a>10.直接删除表emp01中的列 department_id</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp01 </span><br><span class="line"><span class="keyword">DROP</span> department_id;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL练习</title>
      <link href="/2023/03/20/MySQL%E7%BB%83%E4%B9%A0/"/>
      <url>/2023/03/20/MySQL%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><h4 id="1-显示所有员工的姓名，部门号和部门名称。"><a href="#1-显示所有员工的姓名，部门号和部门名称。" class="headerlink" title="1.显示所有员工的姓名，部门号和部门名称。"></a>1.显示所有员工的姓名，部门号和部门名称。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT e.last_name,e.department_id,d.department_name</span><br><span class="line">FROM employees e  LEFT JOIN departments d </span><br><span class="line">ON e.department_id = d.department_id;</span><br></pre></td></tr></table></figure><h4 id="2-查询90号部门员工的job-id和90号部门的location-id"><a href="#2-查询90号部门员工的job-id和90号部门的location-id" class="headerlink" title="2.查询90号部门员工的job_id和90号部门的location_id"></a>2.查询90号部门员工的job_id和90号部门的location_id</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT e.job_id,d.location_id</span><br><span class="line">FROM employees e  INNER JOIN departments d</span><br><span class="line">ON e.department_id = d.department_id </span><br><span class="line">WHERE e.department_id = 90;</span><br></pre></td></tr></table></figure><h4 id="3-选择所有有奖金的员工的-last-name-department-name-location-id-city"><a href="#3-选择所有有奖金的员工的-last-name-department-name-location-id-city" class="headerlink" title="3.选择所有有奖金的员工的 last_name , department_name , location_id , city"></a>3.选择所有有奖金的员工的 last_name , department_name , location_id , city</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT e.last_name,d.department_name,d.location_id,l.city</span><br><span class="line">FROM employees e </span><br><span class="line">LEFT JOIN departments d </span><br><span class="line">ON e.department_id = d.department_id </span><br><span class="line">LEFT JOIN locations l </span><br><span class="line">ON d.location_id = l.location_id</span><br><span class="line">WHERE commission_pct IS NOT NULL;</span><br></pre></td></tr></table></figure><h4 id="4-选择city在Toronto工作的员工的-last-name-job-id-department-id-department-name"><a href="#4-选择city在Toronto工作的员工的-last-name-job-id-department-id-department-name" class="headerlink" title="4.选择city在Toronto工作的员工的 last_name , job_id , department_id , department_name"></a>4.选择city在Toronto工作的员工的 last_name , job_id , department_id , department_name</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT e.last_name,e.job_id,e.department_id,d.department_name </span><br><span class="line">FROM employees e JOIN departments d </span><br><span class="line">ON e.department_id = d.department_id </span><br><span class="line">JOIN locations l </span><br><span class="line">ON d.location_id = l.location_id</span><br><span class="line">WHERE l.city = &#x27;Toronto&#x27;;</span><br></pre></td></tr></table></figure><h4 id="5-查询员工所在的部门名称、部门地址、姓名、工作、工资，其中员工所在部门的部门名称为’Executive’"><a href="#5-查询员工所在的部门名称、部门地址、姓名、工作、工资，其中员工所在部门的部门名称为’Executive’" class="headerlink" title="5.查询员工所在的部门名称、部门地址、姓名、工作、工资，其中员工所在部门的部门名称为’Executive’"></a>5.查询员工所在的部门名称、部门地址、姓名、工作、工资，其中员工所在部门的部门名称为’Executive’</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT department_name,street_address,last_name,job_id,salary </span><br><span class="line">FROM employees e </span><br><span class="line">JOIN departments d </span><br><span class="line">ON e.department_id = d.department_id </span><br><span class="line">JOIN locations l </span><br><span class="line">ON d.location_id = l.location_id</span><br><span class="line">WHERE d.department_name = &#x27;Executive&#x27;;</span><br></pre></td></tr></table></figure><h4 id="6-选择指定员工的姓名，员工号，以及他的管理者的姓名和员工号，结果类似于下面的格式"><a href="#6-选择指定员工的姓名，员工号，以及他的管理者的姓名和员工号，结果类似于下面的格式" class="headerlink" title="6.选择指定员工的姓名，员工号，以及他的管理者的姓名和员工号，结果类似于下面的格式"></a>6.选择指定员工的姓名，员工号，以及他的管理者的姓名和员工号，结果类似于下面的格式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">employees Emp# manager Mgr#</span><br><span class="line">kochhar 101 king 100</span><br><span class="line">SELECT emp.last_name,emp.employee_id &quot;Emp#&quot;,mgr.last_name,mgr.employee_id &quot;Mgr#&quot;</span><br><span class="line">FROM employees emp </span><br><span class="line">LEFT JOIN employees mgr </span><br><span class="line">ON emp.manager_id = mgr.employee_id ;</span><br></pre></td></tr></table></figure><h4 id="7-查询哪些部门没有员工"><a href="#7-查询哪些部门没有员工" class="headerlink" title="7.查询哪些部门没有员工"></a>7.查询哪些部门没有员工</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT d.department_name,e.last_name </span><br><span class="line">FROM departments d </span><br><span class="line">LEFT JOIN employees e</span><br><span class="line">ON e.department_id = d.`department_id`</span><br><span class="line">WHERE e.last_name IS NULL;</span><br></pre></td></tr></table></figure><h4 id="8-查询哪个城市没有部门"><a href="#8-查询哪个城市没有部门" class="headerlink" title="8. 查询哪个城市没有部门"></a>8. 查询哪个城市没有部门</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT l.city,l.location_id </span><br><span class="line">FROM locations l </span><br><span class="line">LEFT JOIN departments d </span><br><span class="line">ON l.location_id = d.location_id </span><br><span class="line">WHERE d.department_id IS NULL;</span><br></pre></td></tr></table></figure><h4 id="9-查询部门名为-Sales-或-IT-的员工信息"><a href="#9-查询部门名为-Sales-或-IT-的员工信息" class="headerlink" title="9. 查询部门名为 Sales 或 IT 的员工信息"></a>9. 查询部门名为 Sales 或 IT 的员工信息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT department_name,employee_id,last_name,salary </span><br><span class="line">FROM employees e </span><br><span class="line">JOIN departments d</span><br><span class="line">ON e.department_id = d.department_id </span><br><span class="line">WHERE d.department_name = &#x27;Sales&#x27; OR</span><br><span class="line">d.department_name = &#x27;IT&#x27;;</span><br></pre></td></tr></table></figure><hr><h3 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h3><h4 id="1-显示系统时间-注：日期-时间"><a href="#1-显示系统时间-注：日期-时间" class="headerlink" title="1.显示系统时间(注：日期+时间)"></a>1.显示系统时间(注：日期+时间)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT CONCAT (CURDATE(),&#x27;|&#x27;,CURTIME()) DATE_TIME,CURDATE(),CURTIME() </span><br><span class="line">FROM DUAL;</span><br></pre></td></tr></table></figure><h4 id="2-查询员工号，姓名，工资，以及工资提高百分之20-后的结果（new-salary）"><a href="#2-查询员工号，姓名，工资，以及工资提高百分之20-后的结果（new-salary）" class="headerlink" title="2.查询员工号，姓名，工资，以及工资提高百分之20%后的结果（new salary）"></a>2.查询员工号，姓名，工资，以及工资提高百分之20%后的结果（new salary）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT employee_id,last_name,salary,salary * 1.2 &quot;new salary&quot;</span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><h4 id="3-将员工的姓名按首字母排序，并写出姓名的长度（length）"><a href="#3-将员工的姓名按首字母排序，并写出姓名的长度（length）" class="headerlink" title="3.将员工的姓名按首字母排序，并写出姓名的长度（length）"></a>3.将员工的姓名按首字母排序，并写出姓名的长度（length）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name, LENGTH(last_name)</span><br><span class="line">FROM employees </span><br><span class="line">ORDER BY last_name ASC;</span><br></pre></td></tr></table></figure><h4 id="4-查询员工id-last-name-salary，并作为一个列输出，别名为OUT-PUT"><a href="#4-查询员工id-last-name-salary，并作为一个列输出，别名为OUT-PUT" class="headerlink" title="4.查询员工id,last_name,salary，并作为一个列输出，别名为OUT_PUT"></a>4.查询员工id,last_name,salary，<code>并作为一个列输出，别名为OUT_PUT</code></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT CONCAT(employee_id, &#x27;,&#x27;, last_name,&#x27;,&#x27;,salary) OUT_PUT</span><br><span class="line">FROM employees; </span><br></pre></td></tr></table></figure><h4 id="5-查询公司各员工工作的年数、工作的天数，并按工作年数的降序排序"><a href="#5-查询公司各员工工作的年数、工作的天数，并按工作年数的降序排序" class="headerlink" title="5.查询公司各员工工作的年数、工作的天数，并按工作年数的降序排序"></a>5.查询公司各员工工作的年数、工作的天数，并按工作年数的降序排序</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT DATEDIFF(NOW(),hire_date)/365 work_year,DATEDIFF(NOW(),hire_date) work_days </span><br><span class="line">FROM employees </span><br><span class="line">ORDER BY  work_year DESC;</span><br></pre></td></tr></table></figure><h4 id="6-查询员工姓名，hire-date-department-id，满足以下条件：雇用时间在1997年之后，department-id为80-或-90-或110-commission-pct不为空"><a href="#6-查询员工姓名，hire-date-department-id，满足以下条件：雇用时间在1997年之后，department-id为80-或-90-或110-commission-pct不为空" class="headerlink" title="6.查询员工姓名，hire_date , department_id，满足以下条件：雇用时间在1997年之后，department_id为80 或 90 或110, commission_pct不为空"></a>6.查询员工姓名，hire_date , department_id，满足以下条件：雇用时间在1997年之后，department_id为80 或 90 或110, commission_pct不为空</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name,hire_date,department_id </span><br><span class="line">FROM employees </span><br><span class="line">WHERE YEAR(hire_date) &gt;= 1997 </span><br><span class="line">#WHERE DATE_FORMAT(hire_date,&#x27;%Y&#x27;) &gt;= &#x27;1997&#x27;</span><br><span class="line">AND department_id IN(80,90,110)</span><br><span class="line">AND commission_pct IS NOT NULL;</span><br></pre></td></tr></table></figure><h4 id="7-查询公司中入职超过10000天的员工姓名、入职时间"><a href="#7-查询公司中入职超过10000天的员工姓名、入职时间" class="headerlink" title="7.查询公司中入职超过10000天的员工姓名、入职时间"></a>7.查询公司中入职超过10000天的员工姓名、入职时间</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name,hire_date</span><br><span class="line">FROM employees</span><br><span class="line">#WHERE TO_DAYS(NOW()) - to_days(hire_date) &gt; 10000;</span><br><span class="line">WHERE DATEDIFF(NOW(),hire_date) &gt; 10000;</span><br></pre></td></tr></table></figure><h4 id="8-做一个查询，产生下面的结果-earns-monthly-but-wants"><a href="#8-做一个查询，产生下面的结果-earns-monthly-but-wants" class="headerlink" title="8.做一个查询，产生下面的结果  earns  monthly but wants "></a>8.做一个查询，产生下面的结果 <last_name> earns <salary> monthly but wants <salary*3></salary*3></salary></last_name></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT CONCAT(last_name,&#x27; earns &#x27;,salary,&#x27;monthly &#x27; , &#x27;but wants &#x27; ,salary*3) &quot;Dream Salary&quot;</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">SELECT CONCAT(last_name, &#x27; earns &#x27;, TRUNCATE(salary, 0) , &#x27; monthly but wants &#x27;,#改进</span><br><span class="line">TRUNCATE(salary * 3, 0)) &quot;Dream Salary&quot;</span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><h4 id="9-使用CASE-WHEN，按照下面的条件："><a href="#9-使用CASE-WHEN，按照下面的条件：" class="headerlink" title="9.使用CASE-WHEN，按照下面的条件："></a>9.使用CASE-WHEN，按照下面的条件：</h4><p>— job grade<br>— AD_PRES A<br>— ST_MAN B<br>— IT_PROG C<br>— SA_REP D<br>— ST_CLERK E<br>— 产生下面的结果<br>— Last_name Job_id Grade<br>— king AD_PRES A</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name Last_name, job_id Job_id, CASE job_id WHEN &#x27;AD_PRES&#x27; THEN &#x27;A&#x27;</span><br><span class="line">WHEN &#x27;ST_MAN&#x27; THEN &#x27;B&#x27;</span><br><span class="line">WHEN &#x27;IT_PROG&#x27; THEN &#x27;C&#x27;</span><br><span class="line">WHEN &#x27;SA_REP&#x27; THEN &#x27;D&#x27;</span><br><span class="line">WHEN &#x27;ST_CLERK&#x27; THEN &#x27;E&#x27;</span><br><span class="line">ELSE &#x27;F&#x27;</span><br><span class="line">END &quot;grade&quot;</span><br><span class="line">FROM employees</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提问的艺术</title>
      <link href="/2023/03/19/%E6%8F%90%E9%97%AE%E7%9A%84%E8%89%BA%E6%9C%AF/"/>
      <url>/2023/03/19/%E6%8F%90%E9%97%AE%E7%9A%84%E8%89%BA%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="提问的艺术"><a href="#提问的艺术" class="headerlink" title="提问的艺术"></a>提问的艺术</h2><blockquote><font size="5px">注：有钱能使鬼推磨，给钱了的话请无视下面的内容。</font></blockquote><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><blockquote>  <font size="5px">掌握提问的艺术是为了让被你提问的人更舒适，表面上是对对方好，实际上是对自己好，因为只有对方舒适了才能更好的给你解决问题，he对于没有礼貌、无理取闹的人高手是傲慢的。</font></blockquote><h3 id="礼貌"><a href="#礼貌" class="headerlink" title="礼貌"></a>礼貌</h3><blockquote>  <font size="5px">时刻铭记你是提问的，他人没有回答你问题的义务，回答你的问题只是出于好心帮助你，要对对方保持礼貌的态度（关系好的话可以适当放松）并且要懂得感谢（不一定要直接表现出来，但是从一个人的平常的言语就能察觉到对方的态度）。</font></blockquote><h3 id="绝对避免"><a href="#绝对避免" class="headerlink" title="绝对避免"></a>绝对避免</h3><h4 id="在不"><a href="#在不" class="headerlink" title="在不"></a>在不</h4><blockquote><p>   不要只问<code>“有没有人在？”</code>、<code>“在不？”</code>等诸如此类的问题。如果要打招呼的话直接在打招呼的话后面加上你的问题，因为如果是在群里，你问有没有人在，如果别人出来说他在但是你问的问题他不会，就很容易会显得很尴尬。同时如果当时如果没有人看到你的消息，当你离开的时候有人看到了也无法回答你的问题。为了避免尴尬和打时间差，直接说出问题更为高效。</p></blockquote><h4 id="为什么有问题"><a href="#为什么有问题" class="headerlink" title="为什么有问题"></a>为什么有问题</h4><blockquote><p>  <code>不要只问“为什么我的代码有问题”一类的问题</code>。你这么说别人根本不知道你是什么问题，是编译错误，是答案错误，是运行错误，还是说是时间超限？要么通过其它方式暗示你是哪种问题，要么就直接指出来。</p><h4 id="哪里错了"><a href="#哪里错了" class="headerlink" title="哪里错了"></a>哪里错了</h4><p>  <code>不要只问“我哪里错了”一类的问题，除非你的代码十分简单，一眼就能看出来问题</code>。因为没有目的的排查错误会比有目的更加费时费力。</p><h4 id="只贴代码"><a href="#只贴代码" class="headerlink" title="只贴代码"></a>只贴代码</h4><p>  <code>不要只贴出你的代码，至少要标明题号，最好直接给出题目截图。</code>因为没有题目的话别人需要从你的代码中揣测你的意图，如果你的代码逻辑有问题的话有时候会很难看出来你要干什么。同时问问题的时候你肯定是开着题目页面的，你截题目只是几秒钟的事情，但是对于有些人如果只有题号可能需要费半天事来查看题干。</p><h4 id="喂，你过来"><a href="#喂，你过来" class="headerlink" title="喂，你过来"></a>喂，你过来</h4><p>  <code>不要粗鲁对待给你解答问题的人。</code>如果不是对方提出不合理的要求，尽量满足对方的条件（这个条件是指关于解题的内容，而不是所谓的报酬）并有礼貌的对待对方。这样有利于给对方留下一个好的印象，方便以后问问题。</p><h4 id="1-1-？"><a href="#1-1-？" class="headerlink" title="1+1=？"></a>1+1=？</h4><p>  <code>不要问白痴问题。</code>对于一些简单到不能再简单，随便搜一下就能找到答案的问题不要问！（除非你真的是无敌小白什么都不知道）。不要逼对方对你说“你TMD百度啊！”。</p><hr><h3 id="尽量避免"><a href="#尽量避免" class="headerlink" title="尽量避免"></a>尽量避免</h3><h4 id="乱七八糟的代码"><a href="#乱七八糟的代码" class="headerlink" title="乱七八糟的代码"></a>乱七八糟的代码</h4><p>  提问前规范你的代码，实在不会规范可以用一下IDE自带的格式化功能，然后抽时间看一下<a href="https://kmar.top/posts/61e7750c/">规范内容</a>。因为不规范的代码看起来“非 常 难 受”。所以除非有人需要复制你的代码，也不要直接把你的代码复制到聊天框发出来，这样子发出来的代码和没有规范没啥区别，甚至更过分。</p><h4 id="拍照"><a href="#拍照" class="headerlink" title="拍照"></a>拍照</h4><p>  能截图就截图，拍照很容易拍不清楚，甚至有可能泄露你的隐私。</p><h4 id="对着一只羊使劲薅"><a href="#对着一只羊使劲薅" class="headerlink" title="对着一只羊使劲薅"></a>对着一只羊使劲薅</h4><p>  薅羊毛要换着羊薅，别一直盯着一个人使劲问，留给对方一些自己的时间优先在群里问问题。</p><h4 id="今日好图"><a href="#今日好图" class="headerlink" title="今日好图"></a>今日好图</h4><p><img src="https://pic.cartafi.org/safe/7yj5qpjLtL" alt="好图"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 提问 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 提问 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2023/03/17/MySQL/"/>
      <url>/2023/03/17/MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="在SQL中，-没有连接的作用，就表示加法运算。此时，会将字符串转换为数值-隐式转换"><a href="#在SQL中，-没有连接的作用，就表示加法运算。此时，会将字符串转换为数值-隐式转换" class="headerlink" title="在SQL中，+没有连接的作用，就表示加法运算。此时，会将字符串转换为数值(隐式转换)"></a>在SQL中，+没有连接的作用，就表示加法运算。此时，会将字符串转换为数值(隐式转换)</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT 100 + &#x27;1&#x27; #在Java语言中，结果是:1001</span><br><span class="line">FROM DUAL;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT 100 + &#x27;a&#x27; #此时将&#x27;a&#x27;看做0处理</span><br><span class="line">FROM DUAL;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT 100 + NULL #null值参与运算，结果为null</span><br><span class="line">FROM DUAL;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT 100 DIV 0 ,100/0 #分母如果为0，则结果为null</span><br><span class="line">FROM DUAL;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT 1 = 2 ,1 != 2,1 = &#x27;1&#x27; ,1 = &#x27;a&#x27;, 0 = &#x27;a&#x27; #字符串存在隐式转换。如果转化数值不成功，则看做0</span><br><span class="line">FROM DUAL;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT &#x27;a&#x27; =&#x27;a&#x27; ,&#x27;ab&#x27; = &#x27;ab&#x27;,&#x27;a&#x27;=&#x27;b&#x27; #两边都是字符串的话，则按照ANSI的比较规则进行比较</span><br><span class="line">FROM DUAL;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT 1 = NULL, NULL = NULL #只要有null参与判断，结果就为NULL</span><br><span class="line">FROM DUAL;</span><br></pre></td></tr></table></figure><p> <code>&lt;=&gt; 安全等于 记忆技巧:为NULL而生</code><br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WHERE commission_pct = NULL; #此时执行,不会有任何结果</span><br><span class="line">SELECT 1 &lt;=&gt; NULL ,NULL &lt;=&gt; NULL;</span><br></pre></td></tr></table></figure><br> <code>_: 代表一个不确定的字符</code><br>查询第二个字符是’a’的员工信息<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name </span><br><span class="line">FROM employees </span><br><span class="line">WHERE last_name LIKE &#x27;_a%&#x27;;</span><br></pre></td></tr></table></figure><br>查询第二个字符是<em>且第三个字符是’a’的员工信息<br><code>需要用到转义字符:\</code><br>``<br>WHERE last_name LIKE ‘</em>_a%’;<br>``</p><p><code>如果给表起了别名,一旦在SELECT或WHERE中使用表名的话,则必须使用表的别名,而不能再使用表的原名</code></p><hr><p><code>如果有n个表实现多表的查询,则需要至少n-1个连接条件</code></p><hr><h2 id="内连接vs外连接"><a href="#内连接vs外连接" class="headerlink" title="内连接vs外连接"></a>内连接vs外连接</h2><p>内连接: 合并具有同一列的两个以上的表的行,结果集中不包含一个表与另一个表不匹配的行<br>外连接: 合并具有同一列的两个以上的表的行,结果集中除了包含一个表与另一个表匹配的行之外,还查询了左表或者右表中不匹配的行。<br><code>外连接的分类: 左外连接，右外连接，满外连接</code><br><img src="https://pic.cartafi.org/safe/jJgePsDcyK" alt="UNION与UNION ALL"><br><img src="https://pic.cartafi.org/safe/PTnFn9mQJZ" alt="1"><br><img src="https://pic.cartafi.org/safe/bHk1TRHIvL" alt="实例"></p><h2 id="如果计算表中有多少条记录-如何实现？"><a href="#如果计算表中有多少条记录-如何实现？" class="headerlink" title="如果计算表中有多少条记录,如何实现？"></a>如果计算表中有多少条记录,如何实现？</h2><ul><li>方式1: COUNT(*)</li><li>方式2: COUNT(1)</li><li>方式3: COUNT(具体字段): 不一定对~<br><code>注意: 计算指定字段出现的个数时，是不计算NULL值的</code><h2 id="公式-AVG-SUM-COUNT"><a href="#公式-AVG-SUM-COUNT" class="headerlink" title="公式: AVG = SUM/COUNT"></a>公式: AVG = SUM/COUNT</h2></li></ul><h2 id="SELECT中出现的非组函数的字段必须声明在GROUP-BY中。而GROUP-BY中声明的字段可以不出现在SELECT中"><a href="#SELECT中出现的非组函数的字段必须声明在GROUP-BY中。而GROUP-BY中声明的字段可以不出现在SELECT中" class="headerlink" title="SELECT中出现的非组函数的字段必须声明在GROUP BY中。而GROUP BY中声明的字段可以不出现在SELECT中"></a>SELECT中出现的非组函数的字段必须声明在GROUP BY中。而GROUP BY中声明的字段可以不出现在SELECT中</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象(基础)</title>
      <link href="/2023/03/17/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/03/17/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="2-4-面向对象完成功能的三步骤（重要）"><a href="#2-4-面向对象完成功能的三步骤（重要）" class="headerlink" title="2.4 面向对象完成功能的三步骤（重要）"></a>2.4 面向对象完成功能的三步骤（重要）</h3><h4 id="步骤1：类的定义"><a href="#步骤1：类的定义" class="headerlink" title="步骤1：类的定义"></a>步骤1：类的定义</h4><p>类的定义使用关键字：class。格式如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] class 类名&#123;</span><br><span class="line">属性声明;</span><br><span class="line">    方法声明;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">//声明属性age</span></span><br><span class="line">    <span class="type">int</span> age ;                   </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//声明方法showAge()</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;        </span><br><span class="line">    System.out.println(<span class="string">&quot;人吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span>&#123;</span><br><span class="line">    <span class="comment">//声明属性</span></span><br><span class="line">String type; <span class="comment">//种类</span></span><br><span class="line">String nickName; <span class="comment">//昵称</span></span><br><span class="line">String hostName; <span class="comment">//主人名称</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123; <span class="comment">//吃东西</span></span><br><span class="line">System.out.println(<span class="string">&quot;狗狗进食&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">char</span> gender;</span><br><span class="line">    Dog dog;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//喂宠物</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">()</span>&#123;</span><br><span class="line">        dog.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="面向对象的理解与类的实例化"><a href="#面向对象的理解与类的实例化" class="headerlink" title="面向对象的理解与类的实例化"></a>面向对象的理解与类的实例化</h3><p>成员之一:属性,成员变量,field(字段,域)<br>成员之二:(成员)方法,函数,method</p><h3 id="1-类的实例化刨析-内存解析"><a href="#1-类的实例化刨析-内存解析" class="headerlink" title="1 类的实例化刨析,内存解析"></a>1 类的实例化刨析,内存解析</h3><h4 id="1-对象再内存中的分配涉及到的内存结构-理论"><a href="#1-对象再内存中的分配涉及到的内存结构-理论" class="headerlink" title="1.对象再内存中的分配涉及到的内存结构(理论)"></a>1.对象再内存中的分配涉及到的内存结构(理论)</h4><ul><li>栈(stack): 方法内定义的变量,存储在栈中</li><li>堆(heap): new出来的结构(比如数组实体，对象实体),包括对象中的属性</li><li>方法区(method area)存放类的模板。比如: person类的模板<h5 id="类的实例化"><a href="#类的实例化" class="headerlink" title="类的实例化"></a>类的实例化</h5>等价描述:类的实例化 &lt;=&gt; 创建类的对象 &lt;=&gt; 创建类的实例<br>格式: <code>数据类型 对象名 = 通过new创建的对象实体</code><br>举例:<br>Phone p1 = new Phone();<br>Scanner scan = new Scanner(System.in);<br>String str = new String();</li></ul><h4 id="2类中对象的内存解析"><a href="#2类中对象的内存解析" class="headerlink" title="2类中对象的内存解析"></a>2类中对象的内存解析</h4><p>强调1: 创建了Person类的两个对象<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person p1 = new Person();</span><br><span class="line">Person p2 = new Person();</span><br></pre></td></tr></table></figure><br>说明: 创建类的多个对象时，有个new 出对象，那么他们每个对象实例都保存着一份类的属性<br>如果修改某一个对象的某属性值时，不会影响其他对象此属性的值<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p1.age = 10;</span><br><span class="line">p2.age = 20;</span><br><span class="line">p1.age = 30;</span><br><span class="line">System.out.println(p2.age);//20</span><br></pre></td></tr></table></figure><br>强调2:声明类的两个变量<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person p1 = new Person();</span><br><span class="line">Person p3 = p1;</span><br></pre></td></tr></table></figure><br><strong>说明此时p1,p3两个变量指向了堆空间中的同一个对象实体。(或者p1，p3保存的地址值相同)</strong><br>如果通过其中某一个对象变量修改对象的属性时，会导致另一个对象变量此属性的值。<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p1.age = 10;</span><br><span class="line">p3.age = 20;</span><br><span class="line">System.out.println(p1.age);//20</span><br></pre></td></tr></table></figure></p><h3 id="2-类"><a href="#2-类" class="headerlink" title="2 类"></a>2 类</h3><h4 id="2-1变量的分类"><a href="#2-1变量的分类" class="headerlink" title="2.1变量的分类:"></a>2.1变量的分类:</h4><ul><li>角度1: 按照<code>数据</code>来分:<br>有基本数据类型(8种),引用数据类型(数组，类，接口，枚举，注解，记录)</li><li>角度2: 按照变量在类中<code>声明的位置的不同</code>:<br>成员变量(或属性),局部变量(方法内，方法形参，构造器内)<br>注意(属性的几个称谓:成员变量，属性，field(字段,域))<h4 id="2-2区分成员变量-VS-局部变量"><a href="#2-2区分成员变量-VS-局部变量" class="headerlink" title="2.2区分成员变量 VS 局部变量"></a>2.2区分成员变量 VS 局部变量</h4><ul><li>相同点:<blockquote><p>变量声明的格式相同: 数据类型 变量名 = 变量值<br>变量都有其有效的作用域。出了作用域就失效了。<br>变量必须先声明，后赋值，再使用。</p></blockquote></li></ul></li></ul><hr><ul><li><p>不同点:</p><blockquote><ol><li>类种声明的位置不同:<br>属性:声明在类内,方法外的变量<br>局部变量:声明方法,构造器内部的变量</li><li>在内存分配的位置不同:<br>属性:随着对象的创建,创建在堆空间里<br>局部变量:存储在栈空间里</li><li>生命周期:<br>属性:随着对象的创建而创建，随着对象的消亡而消亡<br>局部变量:随着方法对应的栈帧入栈，局部变量会在栈中分配;随着方法对应的栈帧出栈,局部变量消亡</li><li>作用域:<br>属性:在整个类的内部都是有效的<br>局部变量: 仅限于声明此局部变量所在的方法(或构造器，代码块)中</li><li>是否可以有权限修饰符进行修饰:(难)<br>有哪些权限修饰符:<code>public、protected、缺省、private</code><br>属性: 是可以使用权限修饰符进行修饰<br>局部变量: 不能使用如任何权限修饰符进行修饰</li><li>是否有默认值:(重点)<br>属性: 都有默认的初始值<br>意味着,如果没有给属性进行显式初始化赋值,则会有默认初始化值</li></ol></blockquote><p>  局部变量:都没有默认初始化值<br>  意味着,在使用局部变量之前,必须要显示的赋值,否则报错<br>  <code>注意: 对于方法的形参而言,在调用方法时，给此形参赋值即可</code></p></li></ul><h3 id="2-3面向对象完成具体功能的操作三部曲-！！！"><a href="#2-3面向对象完成具体功能的操作三部曲-！！！" class="headerlink" title="2.3面向对象完成具体功能的操作三部曲(！！！)"></a>2.3<code>面向对象完成具体功能的操作三部曲(！！！)</code></h3><h4 id="步骤1：类的定义-1"><a href="#步骤1：类的定义-1" class="headerlink" title="步骤1：类的定义"></a>步骤1：类的定义</h4><p>类的定义使用关键字：class。格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] class 类名&#123;</span><br><span class="line">属性声明;</span><br><span class="line">    方法声明;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span>&#123;</span><br><span class="line">    <span class="comment">//声明属性</span></span><br><span class="line">String type; <span class="comment">//种类</span></span><br><span class="line">String nickName; <span class="comment">//昵称</span></span><br><span class="line">String hostName; <span class="comment">//主人名称</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123; <span class="comment">//吃东西</span></span><br><span class="line">System.out.println(<span class="string">&quot;狗狗进食&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">char</span> gender;</span><br><span class="line">    Dog dog;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//喂宠物</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">()</span>&#123;</span><br><span class="line">        dog.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤2-创建类的对象，比如-Phone-p1-new-Phone-；"><a href="#步骤2-创建类的对象，比如-Phone-p1-new-Phone-；" class="headerlink" title="步骤2:创建类的对象，比如:Phone p1 = new Phone()；"></a>步骤2:创建类的对象，比如:Phone p1 = new Phone()；</h4><p><img src="https://pic.cartafi.org/safe/3bE8MKLjcu" alt="对象的创建"></p><ul><li>创建对象，使用关键字：<strong>new</strong></li><li>创建对象语法： </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式1：给创建的对象命名</span></span><br><span class="line"><span class="comment">//把创建的对象用一个引用数据类型的变量保存起来，这样就可以反复使用这个对象了</span></span><br><span class="line">类名 对象名 = <span class="keyword">new</span> 类名();</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2：</span></span><br><span class="line"><span class="keyword">new</span> 类名()<span class="comment">//也称为匿名对象</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>举例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PersonTest</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">//创建Person类的对象</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">per</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="comment">//创建Dog类的对象</span></span><br><span class="line"><span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤3-通过对象-调用其内部声明的属性或方法，完成相关的功能"><a href="#步骤3-通过对象-调用其内部声明的属性或方法，完成相关的功能" class="headerlink" title="步骤3:通过对象,调用其内部声明的属性或方法，完成相关的功能"></a>步骤3:通过对象,调用其内部声明的属性或方法，完成相关的功能</h4><ul><li><p>对象是类的一个<strong>实例</strong>，必然具备该类事物的属性和行为（即方法）。</p></li><li><p>使用”<code>对象名.属性</code>“ 或 “<code>对象名.方法</code>“的方式访问对象成员（包括属性和方法）</p></li></ul><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明Animal类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123; <span class="comment">//动物类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> legs;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Eating.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Move.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnimalTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">xb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">        xb.legs = <span class="number">4</span>;<span class="comment">//访问属性</span></span><br><span class="line">        System.out.println(xb.legs);</span><br><span class="line">        xb.eat();<span class="comment">//访问方法</span></span><br><span class="line">        xb.move();<span class="comment">//访问方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic.cartafi.org/safe/ozWbMrNEWG" alt="图示理解"><br>举例2：针对前面步骤1的举例2：类的实例化（创建类的对象）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Game</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="comment">//通过Person对象调用属性</span></span><br><span class="line">        p.name = <span class="string">&quot;康师傅&quot;</span>;</span><br><span class="line">        p.gender = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">        p.dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(); <span class="comment">//给Person对象的dog属性赋值</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//给Person对象的dog属性的type、nickname属性赋值</span></span><br><span class="line">        p.dog.type = <span class="string">&quot;柯基犬&quot;</span>;</span><br><span class="line">        p.dog.nickName = <span class="string">&quot;小白&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//通过Person对象调用方法</span></span><br><span class="line">        p.feed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-匿名对象-anonymous-object"><a href="#2-4-匿名对象-anonymous-object" class="headerlink" title="2.4 匿名对象 (anonymous object)"></a>2.4 匿名对象 (anonymous object)</h4><ul><li><p>我们也可以不定义对象的句柄，而直接调用这个对象的方法。这样的对象叫做匿名对象。</p><ul><li>如：new Person().shout(); </li></ul></li><li><p>使用情况</p><ul><li>如果一个对象只需要进行一次方法调用，那么就可以使用匿名对象。 </li><li>我们经常将匿名对象作为实参传递给一个方法调用。 <h3 id="3-对象的内存解析"><a href="#3-对象的内存解析" class="headerlink" title="3.对象的内存解析"></a>3.对象的内存解析</h3><h4 id="3-1-JVM内存结构划分"><a href="#3-1-JVM内存结构划分" class="headerlink" title="3.1 JVM内存结构划分"></a>3.1 JVM内存结构划分</h4>HotSpot Java虚拟机的架构图如下。其中我们主要关心的是运行时<code>数据区部分</code>（Runtime Data Area）。<br><img src="https://pic.cartafi.org/safe/qYP3ea0faY" alt="JVM架构-简图"><br>其中：</li></ul></li></ul><p><code>堆（Heap）</code>：此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。这一点在Java虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配。</p><p><code>栈（Stack）</code>：是指虚拟机栈。虚拟机栈用于存储局部变量等。局部变量表存放了编译期可知长度的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它不等同于对象本身，是对象在堆内存的首地址）。 方法执行完，自动释放。</p><p><code>方法区（Method Area）</code>：用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p><h4 id="3-2-对象内存解析"><a href="#3-2-对象内存解析" class="headerlink" title="3.2 对象内存解析"></a>3.2 对象内存解析</h4><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123; <span class="comment">//类：人</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">boolean</span> isMale;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonTest</span> &#123; <span class="comment">//测试类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        p1.name = <span class="string">&quot;赵同学&quot;</span>;</span><br><span class="line">        p1.age = <span class="number">20</span>;</span><br><span class="line">        p1.isMale = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        p2.age = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p3</span> <span class="operator">=</span> p1;</span><br><span class="line">        p3.name = <span class="string">&quot;郭同学&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s6.xinlal.com/2023/03/21/zeDnImWf.jpg" alt="1"></p><blockquote><p>说明：</p><ul><li>堆：凡是new出来的结构(对象、数组)都放在堆空间中。</li><li>对象的属性存放在堆空间中。</li><li>创建一个类的多个对象（比如p1、p2），则每个对象都拥有当前类的一套”副本”（即属性）。当通过一个对象修改其属性时，不会影响其它对象此属性的值。</li><li>当声明一个新的变量使用现有的对象进行赋值时（比如p3 = p1），此时并没有在堆空间中创建新的对象。而是两个变量共同指向了堆空间中同一个对象。当通过一个对象修改属性时，会影响另外一个对象对此属性的调用。</li></ul></blockquote><p><strong>面试题：对象名中存储的是什么呢？</strong></p><p>答：对象地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Student</span>());<span class="comment">//Student@7852e922</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(stu);<span class="comment">//Student@4e25154f</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">System.out.println(arr);<span class="comment">//[I@70dea4e</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接打印对象名和数组名都是显示“类型@对象的hashCode值”，所以说<strong>类、数组都是引用数据类型，引用数据类型的变量中存储的是对象的地址，或者说指向堆中对象的首地址。</strong></p><h3 id="4-类的成员之一：成员变量-field"><a href="#4-类的成员之一：成员变量-field" class="headerlink" title="4. 类的成员之一：成员变量(field)"></a>4. 类的成员之一：成员变量(field)</h3><h4 id="4-1-如何声明成员变量"><a href="#4-1-如何声明成员变量" class="headerlink" title="4.1 如何声明成员变量"></a>4.1 如何声明成员变量</h4><ul><li>语法格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[修饰符<span class="number">1</span>] class 类名&#123;</span><br><span class="line">    [修饰符<span class="number">2</span>] 数据类型 成员变量名 [= 初始化值]; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>说明：<ul><li>位置要求：必须在类中，方法外</li><li>修饰符2(暂不考虑)<ul><li>常用的权限修饰符有：private、缺省、protected、public</li><li>其他修饰符：static、final </li></ul></li><li>数据类型<ul><li>任何基本数据类型(如int、Boolean) 或 任何引用数据类型。</li></ul></li><li>成员变量名<ul><li>属于标识符，符合命名规则和规范即可。</li></ul></li><li>初始化值<ul><li>根据情况，可以显式赋值；也可以不赋值，使用默认值</li></ul></li></ul></li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;             <span class="comment">//声明private变量 age</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> “Lila”;    <span class="comment">//声明public变量 name</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-2-成员变量-vs-局部变量"><a href="#4-2-成员变量-vs-局部变量" class="headerlink" title="4.2 成员变量 vs 局部变量"></a>4.2 成员变量 vs 局部变量</h4><p><strong>1、变量的分类：成员变量与局部变量</strong></p><ul><li>在方法体外，类体内声明的变量称为成员变量。</li><li>在方法体内部等位置声明的变量称为局部变量。</li></ul><p><img src="images/image-20220511101608038.png" alt="image-20220511101608038" style="zoom:67%;"></p><p><img src="images/image-20220319230744617.png" alt="image-20220319230744617" style="zoom:80%;"></p><blockquote><p>其中，static可以将成员变量分为两大类，静态变量和非静态变量。其中静态变量又称为类变量，非静态变量又称为实例变量或者属性。接下来先学习实例变量。</p></blockquote><p><strong>2、成员变量 与 局部变量 的对比</strong></p><ul><li><p>相同点</p><ul><li>变量声明的格式相同： 数据类型  变量名 = 初始化值<ul><li>变量必须先声明、后初始化、再使用。</li></ul><ul><li>变量都有其对应的作用域。只在其作用域内是有效的</li></ul></li></ul></li><li><p>不同点</p></li></ul><p>1、声明位置和方式<br>（1）实例变量：在类中方法外<br>（2）局部变量：在方法体{}中或方法的形参列表、代码块中</p><p>2、在内存中存储的位置不同<br>（1）实例变量：堆<br>（2）局部变量：栈</p><p>3、生命周期<br>（1）实例变量：和对象的生命周期一样，随着对象的创建而存在，随着对象被GC回收而消亡，<br>            而且每一个对象的实例变量是独立的。<br>（2）局部变量：和方法调用的生命周期一样，每一次方法被调用而在存在，随着方法执行的结束而消亡，<br>            而且每一次方法调用都是独立。</p><p>4、作用域<br>（1）实例变量：通过对象就可以使用，本类中直接调用，其他类中“对象.实例变量”<br>（2）局部变量：出了作用域就不能使用</p><p>5、修饰符（后面来讲）<br>（1）实例变量：public,protected,private,final,volatile,transient等<br>（2）局部变量：final</p><p>6、默认值<br>（1）实例变量：有默认值<br>（2）局部变量：没有，必须手动初始化。其中的形参比较特殊，靠实参给它初始化。</p><p><strong>3、对象属性的默认初始化赋值</strong></p><p>当一个对象被创建时，会对其中各种类型的成员变量自动进行初始化赋值。</p><p><img src="images/image-20220319231821747.png" alt="image-20220319231821747" style="zoom:80%;"></p><p><strong>4、举例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;<span class="comment">//人类</span></span><br><span class="line">    <span class="comment">//1.属性</span></span><br><span class="line">    String name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//年龄</span></span><br><span class="line">    <span class="type">boolean</span> isMale;<span class="comment">//是否是男性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(String nation)</span> &#123;</span><br><span class="line">        <span class="comment">//nation:局部变量</span></span><br><span class="line">        String color;<span class="comment">//color:局部变量</span></span><br><span class="line">        color = <span class="string">&quot;yellow&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        p.show(<span class="string">&quot;CHN&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic.cartafi.org/safe/nyoRpzLRyn" alt="2"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS</title>
      <link href="/2023/03/17/JS/"/>
      <url>/2023/03/17/JS/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><figure class="highlight plaintext"><figcaption><span>document</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> 地址: https://www.w3school.com.cn/js/index.asp</span><br><span class="line"> 离线文档: W3School 离线手册(2017.03.11 版).chm</span><br><span class="line"> 基本说明</span><br><span class="line">JavaScript 能改变 HTML 内容，能改变 HTML 属性，能改变 HTML 样式 (CSS)，能完成</span><br><span class="line">页面的数据验证。</span><br></pre></td></tr></table></figure><h2 id="1-两种js的引入方式"><a href="#1-两种js的引入方式" class="headerlink" title="1.两种js的引入方式"></a>1.两种js的引入方式</h2><h3 id="方式1"><a href="#方式1" class="headerlink" title="方式1:"></a>方式1:</h3><ol><li>可以在 head 和 body 嵌入 script</li><li>执行顺序 从上到下</li><li>建议放在 head</li></ol><h3 id="方式2"><a href="#方式2" class="headerlink" title="方式2:"></a>方式2:</h3><p>使用 script 标签引入外部JS文件</p><font color="red">推荐开发中使用这种</font><h2 id="2-JavaScript变量"><a href="#2-JavaScript变量" class="headerlink" title="2.JavaScript变量"></a>2.JavaScript变量</h2><p><img src="https://pic.cartafi.org/safe/Z3J3DLflNa" alt="JavaScript 变量表示存储数据的容器"></p><h2 id="3-JavaScript-数据类型"><a href="#3-JavaScript-数据类型" class="headerlink" title="3.JavaScript 数据类型"></a>3.JavaScript 数据类型</h2><h3 id="3-1数据类型介绍"><a href="#3-1数据类型介绍" class="headerlink" title="3.1数据类型介绍"></a>3.1数据类型介绍</h3><p>数值类型： <code>number</code><br>字符串类型： <code>string</code><br>对象类型: <code>object</code><br>布尔类型： <code>boolean</code><br>函数类型： <code>function</code></p><h3 id="3-2特殊值"><a href="#3-2特殊值" class="headerlink" title="3.2特殊值!!!"></a>3.2特殊值!!!</h3><p>undefined 变量<code>未赋初始值</code>时，<code>默认 undefined</code><br>null <code>空值</code><br>NaN Not a Number <code>非数</code></p><h3 id="3-3数据类型注意"><a href="#3-3数据类型注意" class="headerlink" title="3.3数据类型注意!!"></a>3.3数据类型注意!!</h3><ol><li>String 字符串 [可以双引号括起来，也可以单引号括起来]”a book of JavaScript”、’abc’、<br>“a”、””</li><li>在 JavaScript 语言中，所有的变量，都可以做为一个 boolean 类型的变量去使<br>用。</li><li><code>0</code> 、<code>null</code>、 <code>undefined</code>、<code>&quot;&quot;</code>(空串) 都认为是 false</li></ol><h1 id="JS数组"><a href="#JS数组" class="headerlink" title="JS数组"></a>JS数组</h1><ol><li>JS 中函数的重载会覆盖掉上一次的定义<br>(1) JS 中函数的重载会<code>覆盖</code>掉上一次的定义<br>(2) 当你<code>调用 f1()</code> 时候其实<code>调用的是 f1(name)</code><br>(3) 调用 f1(name) 如果你没有传入实参, 那么这个 name 就是 undefined<br>function f1() {<br>alert(“ok jack~”)<br>}<br>function f1(name) {<br>alert(“hi “ + name); }<br>f1();</li></ol><hr><ol><li>函数的 arguments 隐形参数（作用域在 function 函数内）<br>(1) 隐形参数: 在 function 函数中不需要定义，可以直接用来获取所有参<br>数的变量。<br>(2) 隐形参数特别像 java 的可变参数一样。 public void fun( int … args )<br>(3) js 中的隐形参数跟 java 的可变参数一样。操作类似<code>数组</code><br>(4) 我们用console.log 输出对象的数据，使用<code>,</code> 连接<code>而不是</code>+</li></ol><hr><ol><li>(1)如果我们的函数有<code>形参</code>，在传入实参的时候，仍然按照顺序匹配<br>(2)如果有匹配上，就赋给他， 如果没有匹配上，也无所谓<br>(3)仍然会把<code>所有的实参</code>，赋给 <code>arguments</code><br>(4)如果<code>形参个数</code>，<code>大于</code>了<code>实参个数</code>，则该形参的值为 <code>undefined</code></li></ol><hr><h2 id="数组定义"><a href="#数组定义" class="headerlink" title="数组定义"></a>数组定义</h2><h3 id="数组的四种定义方式"><a href="#数组的四种定义方式" class="headerlink" title="数组的四种定义方式"></a>数组的四种定义方式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var fruit1 = [&quot;苹果&quot;,&quot;草莓&quot;,&quot;香蕉&quot;];</span><br><span class="line">console.log(&quot;fruit1=&quot; + fruit1);</span><br><span class="line">console.log(fruit1[1]); //`表示访问fruit1数组的第2个元素，1表达下标/索引，从0开始编号`</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> 数组定义方式2</span><br><span class="line">var fruit2 = [];//空数组</span><br><span class="line">//添加元素</span><br><span class="line">fruit2[0] = &quot;橘子&quot;;</span><br><span class="line">fruit2[2] = &quot;菠萝&quot;;</span><br><span class="line">console.log(&quot;fruit2[1]=&quot; + fruit2[1]);//如果该元素`没定义`，返回的就是`undefined`</span><br><span class="line">console.log(&quot;fruit2[10]=&quot; + fruit2[10]);// `如果该元素`不存在`,返回的就是`undefined`</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 数组定义方式3</span><br><span class="line">var fruit3 = new Array(&quot;蓝莓&quot;,&quot;猕猴桃&quot;,&quot;榴莲&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> 数组定义方式4</span><br><span class="line">var fruit4 = new Array();//空数组</span><br><span class="line">console.log(typeof fruit4);</span><br><span class="line">fruit4[0] = &quot;苹果&quot;;</span><br><span class="line">fruit4[1] = &quot;苹果&quot;;</span><br><span class="line">fruit4[2] = &quot;yy&quot;;//相当于是给数组扩容</span><br><span class="line">fruit4[0] = &quot;zz&quot;;//替换</span><br><span class="line">fruit4[8] = &quot;红旗&quot;;//扩容, 如果是跳过了下标给赋值，那么中间没有赋值的元素</span><br><span class="line">为 undefined</span><br><span class="line">console.log(&quot;fruit4[3]=&quot; + fruit4[3]);//undefined</span><br><span class="line">console.log(&quot;fruit4=&quot; + fruit4);</span><br></pre></td></tr></table></figure><h3 id="数组使用和遍历"><a href="#数组使用和遍历" class="headerlink" title="数组使用和遍历"></a>数组使用和遍历</h3><p>遍历<br>console.log(“数组的长度= “ + cars.length)//6<br>for (i = 0; i &lt; cars.length; i++) {<br>console.log(cars[i]); //log 方法会自动换行<br>}</p><h1 id="JavaScript-事件"><a href="#JavaScript-事件" class="headerlink" title="JavaScript 事件"></a>JavaScript 事件</h1><p><strong>HTML 事件</strong>HTML 事件可以是浏览器或用户做的某些事情。**</p><p>下面是 HTML 事件的一些例子：</p><p>HTML 网页完成加载<br>HTML 输入字段被修改<br>HTML 按钮被点击<br>通常，当事件发生时，用户会希望做某件事。</p><p>JavaScript 允许您在事件被侦测到时执行代码。</p><p>通过 JavaScript 代码，HTML 允许您向 HTML 元素添加事件处理程序。</p><h2 id="常见的-HTML-事件"><a href="#常见的-HTML-事件" class="headerlink" title="常见的 HTML 事件"></a>常见的 HTML 事件</h2><p>下面是一些常见的 HTML 事件：<br>事件 | 描述<br>-|-|-<br>onchange|HTML 元素已被改变<br>onclick|用户点击了 HTML 元素<br>onmouseover|用户把鼠标移动到 HTML 元素上<br>onmouseout|用户把鼠标移开 HTML 元素<br>onkeydown|用户按下键盘按键<br>onload|浏览器已经完成页面加载</p><hr><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>1.官方文档<br>1.1地址: <a href="https://www.w3school.com.cn/js/js_htmldom.asp">https://www.w3school.com.cn/js/js_htmldom.asp</a><br>1.2离线文档: W3School 离线手册(2017.03.11 版).chm<br>1.3DOM 介绍</p><h3 id="2-基本介绍"><a href="#2-基本介绍" class="headerlink" title="2.基本介绍"></a>2.基本介绍</h3><p>2.1 DOM 全称是 Document Object Model 文档对象模型<br>2.2 就是把文档中的<code>标签</code>，<code>属性</code>，<code>文本</code>，转换成<code>对象</code>来管理<br>dom 分为<code>html dom</code>,<code>css dom</code> <code>xml dom</code><br><img src="https://pic.cartafi.org/safe/qyEfZqEKgY" alt="模型图"></p><hr><h3 id="3-HTML-DOM-文档对象模型"><a href="#3-HTML-DOM-文档对象模型" class="headerlink" title="3.HTML DOM(文档对象模型)"></a>3.HTML DOM(文档对象模型)</h3><p> 3.1 当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）<br> 3.2HTML DOM 树 对象[属性，方法/函数]<img src="https://pic.cartafi.org/safe/zQSHdqkhVN" alt="效果图"></p><h3 id="4-document对象"><a href="#4-document对象" class="headerlink" title="4.document对象"></a>4.document对象</h3><p>4.1 doucment 说明</p><ol><li><code>document</code> 它管理了<code>所有</code>的 <code>HTML 文档内容</code></li><li>document 它是一种<code>树结构</code>的文档。</li><li>有层级关系 在 dom 中把<code>所有的标签</code> 都 <code>对象化</code>（得到这个 html 标签的&lt;—-&gt;对象—&gt;<br>操作）</li><li>通过 <code>document</code> 可以<code>访问所有的标签对象</code><br>4.2doucment对象方法(常用)<br><img src="https://s6.xinlal.com/2023/03/17/VwvmqXZJ.jpg" alt="dom对象方法"></li></ol><hr><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function selectNone() &#123;</span><br><span class="line">//1.获取到 sport 这一组复选框</span><br><span class="line">var sports = document.getElementsByName(&quot;sport&quot;);</span><br><span class="line">//sports 是什么? 是 nodeList 即时一个集合</span><br><span class="line">//alert(sports);</span><br><span class="line">//2. 拿到[dom ,集合]，操作【属性和方法 api】泥瓦匠|工程师 清华</span><br><span class="line">// 遍历 sports， 修改</span><br><span class="line">韩顺平 Java 工程师</span><br><span class="line">for (var i = 0; i &lt; sports.length; i++) &#123;</span><br><span class="line">sports[i].checked = false;//全部不选中</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>基本套路:</strong></p><ol><li>先获取标签的<code>document对象</code></li><li>再将获取的document对象进行<code>绑定/注册(有动态静态)</code><hr><h2 id="常用节点"><a href="#常用节点" class="headerlink" title="常用节点"></a>常用节点</h2><code>空格也算一个节点，算文本节点</code></li><li>childNodes属性，获取当前节点的所有子节点</li><li>firstChild属性，获取当前节点的第一个子节点</li><li>lastChild属性，获取当前节点的最后一个子节点</li><li>parentNode属性，获取当前节点的父节点</li><li>previousSibling，获取当前节点的上一个节点</li><li>nextSibling，获取当前节点的的下个节点</li><li>className，用于获取或设置标签的class的属性值</li><li>innerHTML，获取/设置起始标签和结束标签中的内容</li><li>innerText，获取/设置起始标签和结束标签中的文本</li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针</title>
      <link href="/2023/03/11/%E6%8C%87%E9%92%88/"/>
      <url>/2023/03/11/%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a><u><strong>指针</strong></u></h1><h2 id="热身"><a href="#热身" class="headerlink" title="热身"></a><strong>热身</strong></h2><p><strong><em><img src="https://s1.vika.cn/space/2023/03/13/24f62f3a0d6a4324b233d5c7dd0f1dbb" alt="image-20220907162221270"></em></strong></p><blockquote><p><strong><em>注释：(补充)不能存放int的值</em></strong> </p><p><img src="https://s1.vika.cn/space/2023/03/13/5ecdace0cd424bdbadfec9eaef85eacf" alt="image-20220907171956161"></p><hr></blockquote><p><img src="https://s1.vika.cn/space/2023/03/13/8176a9f2d62f4b4189e3188d02abef59" alt="image-20220907171021290"></p><blockquote><p><strong><em>注释：(补充)修改i的值也不影响p的值</em></strong> </p><p><strong>p指向i 的意思是说，通过p找到i*</strong>     ==*p就是i==</p><p><strong><em>3.如果一个指针变量指向了某个普通变量，则指针变量就完全等同于普通变量*</em></strong></p><p><em>==<strong>例子:</strong>==</em></p><p>​    ==<strong>如果p是个指针变量，并且p存放了普通变量i的地址，</strong>==</p><p><em>==<strong>则p指向了普通变量i ，p就完全等同于 i</strong>==*</em>   </p><p><em>==<strong>或者说 在所有出现p地方都可以替换成i</strong>==*</em></p><p>​             <strong><strong>==在所有出现的i地方都可以替换p==</strong></strong></p><h2 id><a href="#" class="headerlink" title></a><img src="https://s1.vika.cn/space/2023/03/13/031750831e2b4e0097bed472d9b7ebc7" alt="image-20220907173038391"></h2></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>指针就是地址，地址就是编号</p><p><img src="https://s1.vika.cn/space/2023/03/13/bfb7cac2f2924bd885a79b34821c7945" alt="image-20220907173750927"></p><h2 id="指针的重要性"><a href="#指针的重要性" class="headerlink" title="指针的重要性"></a>指针的重要性</h2><p><img src="https://s1.vika.cn/space/2023/03/13/604980318cf4468dada0556a53bd3947" alt="image-20220907180454113"></p><p>其中 1和4更重要</p><h2 id="指针定义"><a href="#指针定义" class="headerlink" title="指针定义"></a>指针定义</h2><p><img src="https://s1.vika.cn/space/2023/03/13/65dfd5ad93ab4607b6e70c672b1c4018" alt="image-20220907181125974"></p><p>先是内存条通过控制线传给cpu，cpu再把数据通过数据线传给内存条，地址线的作用是用来确定是到底是哪个单元来进行控制。  </p><h2 id="基本类型指针常见错误"><a href="#基本类型指针常见错误" class="headerlink" title="基本类型指针常见错误"></a>基本类型指针常见错误</h2><p><img src="https://s1.vika.cn/space/2023/03/13/5ae95b58f67c476888edf5bbe5707e83" alt="image-20220910184133587"></p><p><img src="https://s1.vika.cn/space/2023/03/13/fdb3d2f162394636a621fa43a74e5ff9" alt="image-20220910184056830"></p><p>指针互换</p><p>这个不能完成互换功能</p><p><img src="https://s1.vika.cn/space/2023/03/13/40869cfa13cc418380ae825df261abea" alt="image-20220915083217153"></p><p> <strong>可以互换功能</strong></p><p><strong>因为p存放a的地址(p = &amp;a)，所以p指向a，所以* p = a</strong></p><p><strong>同理,因为p存放b的地址(p= &amp;b ),q指向b，所以* q = b</strong></p><p><strong><img src="https://s1.vika.cn/space/2023/03/13/6753a343106c4bb083cf8472e5b6bf28" alt="image-20220915083731584"></strong></p><p><strong><img src="https://s1.vika.cn/space/2023/03/13/69dbb327df7a45a18356886ff03bb068" alt="image-20220915084054003"></strong></p><p><strong>*的定义</strong></p><ol><li><p>乘法</p></li><li><p>定义指针变量</p><p>int <em> p ；//定义了一个名字叫p的变量，int </em>表示p只能存放int变量的地址</p><p><strong>3.指针运算符，该运算符放在已经定义好的指针变量的前面==</strong>    </p><p><strong>如果p是一个已经定义好的指针变量，==</strong></p><p><strong>则*p表示为，以p的内容为指针的变量==</strong></p></li></ol><p>p132</p><p><img src="https://s1.vika.cn/space/2023/03/13/9e2ecd1aa0c245eb8fdd96f218a08021" alt="image-20220918194033152"></p><p><strong>指针和数组</strong></p><p> <strong>指针和一维数组</strong></p><p>一维数组名是个指针常量</p><p>它存放的是一维数组第一个元素的地址，==数组名 = 数组第一个元素的地址值== a == &amp;a[0]</p><p><img src="https://s1.vika.cn/space/2023/03/13/dd19e416e0d745528f08e989be7a8414" alt="image-20220918201849765"></p><p><img src="https://s1.vika.cn/space/2023/03/13/298454ff1fbe4d2c8347f659e1ad56fe" alt="image-20220918202431592"></p><p>a等价于&amp;a[0],因为a就是a[0]的地址，&amp;a[0]本身就是int *类型</p><p>a[i] = *(a + i) =i[a]</p><p>例如: a[3] = *(a + 3) = 3[a]</p><p><img src="https://s1.vika.cn/space/2023/03/13/287fb099d849450c82c318e3eea2fca9" alt="image-20220918203948861"></p><p><img src="https://s1.vika.cn/space/2023/03/13/49fab71ca6b3456a8f6398abfa29d6c5" alt="image-20220919164647456"></p><p><img src="https://s1.vika.cn/space/2023/03/13/f85e564ab1104af9a7a38b95f7bdee9a" alt="image-20220919181048900"></p><p><img src="https://s1.vika.cn/space/2023/03/13/e8b1108cc3bb45bf81e558a768332af7" alt="image-20220919181103847"></p><p>例如 两个不同的小区，相减没意义。数组指针相减可以</p><p><img src="https://s1.vika.cn/space/2023/03/13/afe48fd263a8468bb182bbc30611c7b4" alt="image-20220919183401398"></p><p>p q r 只存放它指向变量的第一个地址，p q r本身的数据类型来确定 pqr 本身占多少字节</p><p>传统数组的缺点</p><p><img src="https://s1.vika.cn/space/2023/03/13/98c9f36b065c42ffaf52b20fdd8c1bf2" alt="image-20220919192900924"></p><p>为什么需要动态分配内存？</p><p>​    动态数组很好的解决了传统数组的这4个缺陷</p><p><img src="https://s1.vika.cn/space/2023/03/13/4f8a1e07a8604ed1a4c23d1c0296a0a0" alt="image-20220919200231277">4.补充:因为p返回的是第一个字节的地址，而且不能确定p指向的变量占几个字节，所以前面需要(int <em> )强制转换<br>                <em>*前面有数据类型就是静态分配，凡是加了malloc函数就是动态分配的</em></em></p><p>free(p)  //把p所指向的内存释放掉 即 malloc(4)里的4个字节的空间释放掉</p><blockquote><p><em>p = 5       // </em>p 代表的就是一个int变量，只不过 * p这个整型变量的内存分配方式和11行的分配方式不同 </p></blockquote><p><img src="https://s1.vika.cn/space/2023/03/13/057e262b203c4cfbab446025dcd05eb3" alt="image-20220919203016773"></p><p><img src="https://s1.vika.cn/space/2023/03/13/cd9a99db77f34390a1f4ad1328aa224b" alt="image-20220923200016878"></p><p><img src="https://s1.vika.cn/space/2023/03/13/d0eab0155cc345b79504efd7185ec2ec" alt="微信图片_20220923201330"></p><p><img src="https://s1.vika.cn/space/2023/03/13/2456fc82314a40178b0774174f5e458f" alt="image-20220923201708872"></p><p><img src="https://s1.vika.cn/space/2023/03/13/746db9ec7839465daa4e746faa264968" alt="image-20220923202121845"></p><p><img src="https://s1.vika.cn/space/2023/03/13/d12966e516df4e459565f06ffecc33a9" alt="image-20220923202559794">要想通过f(p)方式改变p的值，必须只能发送p的地址来改变，所以图中f(p)是改变不了p的值，必须是要发送p的地址，所以要改成f(&amp;p)</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown教程</title>
      <link href="/2023/03/11/markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2023/03/11/markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 标题名字(井号的个数代表标题的级数)</span></span><br></pre></td></tr></table></figure><h1 id="一级标题使用1个"><a href="#一级标题使用1个" class="headerlink" title="一级标题使用1个"></a>一级标题使用1个</h1><h2 id="二级标题使用2个"><a href="#二级标题使用2个" class="headerlink" title="二级标题使用2个"></a>二级标题使用2个</h2><h3 id="三级标题使用3个"><a href="#三级标题使用3个" class="headerlink" title="三级标题使用3个"></a>三级标题使用3个</h3><h4 id="四级标题使用4个"><a href="#四级标题使用4个" class="headerlink" title="四级标题使用4个"></a>四级标题使用4个</h4><h5 id="五级标题使用5个"><a href="#五级标题使用5个" class="headerlink" title="五级标题使用5个"></a>五级标题使用5个</h5><h6 id="六级标题使用6个"><a href="#六级标题使用6个" class="headerlink" title="六级标题使用6个"></a>六级标题使用6个</h6><hr><h2 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h2><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这就是 ~~删除线~~ (使用波浪号)</span><br></pre></td></tr></table></figure><p>这就是 <del>删除线</del> (使用波浪号)</p><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是用来 <span class="emphasis">*斜体*</span> 的 <span class="emphasis">_文本_</span></span><br></pre></td></tr></table></figure><p>这是用来 <em>斜体</em> 的 <em>文本</em></p><h3 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是用来 <span class="strong">**加粗**</span> 的 <span class="strong">__文本__</span></span><br></pre></td></tr></table></figure><p>这是用来 <strong>加粗</strong> 的 <strong>文本</strong></p><h3 id="斜体-加粗"><a href="#斜体-加粗" class="headerlink" title="斜体+加粗"></a>斜体+加粗</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是用来 <span class="strong">**<span class="emphasis">*斜体+加粗*</span>**</span> 的 <span class="strong">__<span class="emphasis">_文本_</span>__</span></span><br></pre></td></tr></table></figure><p>这是用来 <strong><em>斜体+加粗</em></strong> 的 <strong><em>文本</em></strong></p><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>下划线是HTML语法</p><p><code>下划线</code> <u>下划线(快捷键<code>command</code>+<code>u</code>，视频中所有的快捷键都是针对Mac系统，其他系统可自行查找)</u></p><h3 id="高亮（需勾选扩展语法）"><a href="#高亮（需勾选扩展语法）" class="headerlink" title="高亮（需勾选扩展语法）"></a>高亮（需勾选扩展语法）</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是用来 ==斜体+加粗== 的文本</span><br></pre></td></tr></table></figure><p>这是用来 ==斜体+加粗== 的文本</p><h3 id="下标（需勾选扩展语法）"><a href="#下标（需勾选扩展语法）" class="headerlink" title="下标（需勾选扩展语法）"></a>下标（需勾选扩展语法）</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">水 H~2~O </span><br><span class="line">双氧水 H~2~O~2~ </span><br></pre></td></tr></table></figure><p>水 H~2~O </p><p>双氧水 H~2~O~2~</p><h3 id="上标（需勾选扩展语法）"><a href="#上标（需勾选扩展语法）" class="headerlink" title="上标（需勾选扩展语法）"></a>上标（需勾选扩展语法）</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">面积 m^2^ </span><br><span class="line">体积 m^3^</span><br></pre></td></tr></table></figure><p>面积 m^2^<br>体积 m^3^</p><h3 id="表情符号"><a href="#表情符号" class="headerlink" title="表情符号"></a>表情符号</h3><p> Emoji 支持表情符号，你可以用系统默认的 Emoji 符号（ Windows 用户不一定支持，自己试下~）。 也可以用图片的表情，输入 <code>:</code> 将会出现智能提示。 </p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>使用 <code>|</code> 来分隔不同的单元格，使用 <code>-</code> 来分隔表头和其他行：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name | price</span><br><span class="line">--- | ---</span><br><span class="line">fried chicken | 19</span><br><span class="line">cola|5</span><br></pre></td></tr></table></figure><blockquote><p>为了使 Markdown 更清晰，<code>|</code> 和 <code>-</code> 两侧需要至少有一个空格（最左侧和最右侧的 <code>|</code> 外就不需要了）。</p></blockquote><div class="table-container"><table><thead><tr><th>name</th><th>price</th></tr></thead><tbody><tr><td>fried chicken</td><td>19</td></tr><tr><td>cola</td><td>5</td></tr></tbody></table></div><p>为了美观，可以使用空格对齐不同行的单元格，并在左右两侧都使用 <code>|</code> 来标记单元格边界，在表头下方的分隔线标记中加入 <code>:</code>，即可标记下方单元格内容的对齐方式：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|    name       | price |</span><br><span class="line">| :------------ | :---: |</span><br><span class="line">| fried chicken | 19    |</span><br><span class="line">| cola          |  32   |</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:left">name</th><th style="text-align:center">price</th></tr></thead><tbody><tr><td style="text-align:left">fried chicken</td><td style="text-align:center">19</td></tr><tr><td style="text-align:left">cola</td><td style="text-align:center">32</td></tr></tbody></table></div><p>使用快捷键<code>command</code>+<code>opt</code>+<code>T</code>更方便(段落→表格→插入表格，即可查看快捷键)</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;“后悔创业”</span><br></pre></td></tr></table></figure><blockquote><p>“后悔创业”</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;也可以在引用中</span><br><span class="line">&gt;&gt;使用嵌套的引用</span><br></pre></td></tr></table></figure><blockquote><p>也可以在引用中</p><blockquote><p>使用嵌套的引用</p></blockquote></blockquote><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表—符号-空格"><a href="#无序列表—符号-空格" class="headerlink" title="无序列表—符号 空格"></a>无序列表—符号 空格</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 可以使用 <span class="code">`*`</span> 作为标记</span><br><span class="line"><span class="bullet">+</span> 也可以使用 <span class="code">`+`</span></span><br><span class="line"><span class="bullet">-</span> 或者 <span class="code">`-`</span></span><br></pre></td></tr></table></figure><ul><li>可以使用 <code>*</code> 作为标记</li></ul><ul><li>也可以使用 <code>+</code></li></ul><ul><li>或者 <code>-</code></li></ul><h3 id="有序列表—数字-空格"><a href="#有序列表—数字-空格" class="headerlink" title="有序列表—数字 . 空格"></a>有序列表—数字 <code>.</code> 空格</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 有序列表以数字和 <span class="code">`.`</span> 开始；</span><br><span class="line"><span class="bullet">3.</span> 数字的序列并不会影响生成的列表序列；</span><br><span class="line"><span class="bullet">4.</span> 但仍然推荐按照自然顺序（1.2.3...）编写。</span><br></pre></td></tr></table></figure><ol><li><p>有序列表以数字和 <code>.</code> 开始；</p></li><li><p>数字的序列并不会影响生成的列表序列；</p></li><li><p>但仍然推荐按照自然顺序（1.2.3…）编写。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以使用：数字\. 来取消显示为列表（用反斜杠进行转义）</span><br></pre></td></tr></table></figure></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​<span class="code">```语言名称</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">也可以通过 <span class="code">``，插入行内代码（`</span> 是 <span class="code">`Tab`</span> 键上边、数字 <span class="code">`1`</span> 键左侧的那个按键）：</span><br><span class="line"></span><br><span class="line">例如 <span class="code">`Markdown`</span></span><br></pre></td></tr></table></figure><p><code>Markdown</code></p><h3 id="转换规则"><a href="#转换规则" class="headerlink" title="转换规则"></a>转换规则</h3><p>代码块中的文本（包括 Markdown 语法）都会显示为原始内容</p><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>可以在一行中使用三个或更多的 <code>*</code>、<code>-</code> 或 <code>_</code> 来添加分隔线（``）：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"><span class="strong">***</span></span></span><br><span class="line"><span class="strong"><span class="section">------</span></span></span><br><span class="line"><span class="strong"><span class="section">__<span class="emphasis">_</span></span></span></span><br></pre></td></tr></table></figure><hr><hr><hr><h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><h3 id="外部跳转—超链接"><a href="#外部跳转—超链接" class="headerlink" title="外部跳转—超链接"></a>外部跳转—超链接</h3><p>格式为 <code>[link text](link)</code>。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">帮助文档</span>](<span class="link">https://support.typora.io/Links/#faq</span>)</span><br></pre></td></tr></table></figure><p><a href="https://support.typora.io/Links/#faq">帮助文档</a></p><h3 id="内部跳转—本文件内跳（Typora支持）"><a href="#内部跳转—本文件内跳（Typora支持）" class="headerlink" title="内部跳转—本文件内跳（Typora支持）"></a>内部跳转—本文件内跳（Typora支持）</h3><p>格式为 <code>[link text](#要去的目的地--标题）</code>。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">我想跳转</span>](<span class="link">#饼图（Pie）</span>)</span><br></pre></td></tr></table></figure><blockquote><p>Open Links in Typora</p><p>You can use <code>command+click</code> (macOS), or <code>ctrl+click</code> (Linux/Windows) on links in Typora to jump to target headings, or open them in Typora, or open in related apps.</p></blockquote><p><a href="#饼图（Pie）">我想跳转</a></p><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>使用 <code>&lt;&gt;</code> 包括的 URL 或邮箱地址会被自动转换为超链接：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&lt;https://www.baidu.com&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;123@email.com&gt;</span><br></pre></td></tr></table></figure><p><a href="https://www.baidu.com">https://www.baidu.com</a></p><p><a href="mailto:123@email.com">123@email.com</a></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">自己起的图片名字</span>](<span class="link">图片地址或者图片本地存储的路径</span>)</span><br></pre></td></tr></table></figure><h3 id="网上的图片"><a href="#网上的图片" class="headerlink" title="网上的图片"></a>网上的图片</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![原神](https://pic.cartafi.org/safe/EOgHRTR1LR</span><br><span class="line">https://pic.cartafi.org/safe/LfE6ZRyUG6</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="https://pic.cartafi.org/safe/EOgHRTR1LR" alt="多啦a梦"></p>]]></content>
      
      
      <categories>
          
          <category> 语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2023/03/11/%E6%B5%8B%E8%AF%95/"/>
      <url>/2023/03/11/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><div align="center" class="aspect-ratio">    <iframe src="https://player.bilibili.com/player.html?aid=474023258&&page=1&as_wide=1&high_quality=1&danmaku=0" scrolling="no" border="0" frameborder="no" framespacing="0" high_quality="1" danmaku="1" allowfullscreen="true">     </iframe></div><br><br></p><p><div id="aplayer-oSEOhviA" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="4895239160" data-server="netease" data-type="playlist" data-mode="random" data-autoplay="false" data-listmaxheight="340px" data-preload="auto" data-theme="#e3f2f5" data-volume="0.4" mutex="true"></div><br><div class="note simple"><p>内容</p></div></p><div class="timeline blue"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>时间轴样式</p></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div></div><div class="timeline-item-content"><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class="timeline-item-content"><p>不需要额外处理。</p></div></div></div><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p> <img src="https://cdn.jsdelivr.net/gh/bb12138ss/img@main//test/3.gif" alt="多啦a梦"></p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
